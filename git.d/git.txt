VCS - version control system (Система контроля версий)

=== Понятия
=== Конфиги
=== Параметры запуска
=== Статус и логи
=== Инициализация
=== Основные команды 
=== Откат и удаление
=== Ветвление
=== Работа с сервером
=== Тips&Tricks


=== Понятия

Cостояния кода:
	unstaged - не добавлен в индек коммита
	staged - добавлен в индекс коммита
	commited - закомичен


=== Конфиги

git config --global merge.tool - позволяет подключать дополнительный софт
git config --global alias.l "log --oneline --graph" - создание алисы

git config credential.helper store - сохранить пароль
git config --global http.sslVerify false - отключить проверку https


=== Параметры запуска

-C <path> - путь к рабочей директории


=== Статус и логи

git command --help - cправка по команде
git status

git remote show origin - информация по удаленному репозитарию

git diff --staged
git log 
git log -p -1

git log --graph - просмотр коммитов и состояния проектов
git diff HEAD - показывает разницу между текущими изменениями и коммитом

git log 
--author="Alex Kras" — выводит коммиты, сделанные конкретным человеком
--name-only — выводит только названия изменённых файлов
--oneline — выводит сокращённые данные коммита (в виде одной строки)
--graph — выводит дерево зависимостей для всех коммитов
--reverse — выводит коммиты в обратном хронологическом порядке (сначала
старые)
--after — выводит коммиты, сделанные после определённой даты
--before — выводит коммиты, сделанные до определённой даты
-p filename - вывод в файл

git blame filename - определить автора последних изменений для каждой строки в файле


=== Инициализация

cd folder && git init - инициализация репозитария
cd folder.git && git --bare init - инициализация без рабочих файлов
bare-repo - репозиторий без рабочих файлов


=== Основные команды

== Добавить изменения в гит
git add file
git add -p file - построчный коммит
git add . - добавить все

== Удалить изменения не внесенные в коммит
git clean -fx -d - удалить файлы и директории
git restore . - удалить внесенные изменения в файлы

git revert - отменить изменения указанного коммита

== Работа с изменениями
git stash - черновик позволяет сохранять изменения не прибегая к коммиту
git stash apply - вернуться к изменениям
git stash show - показать состояние черновика

git bisect start - позволяет найти рабочий коммит в случае проблемы
git bisect bad HEAD && git bisect god HEAD~3 - создаем интервал

git ignore (ignore list) - позволяет создавать список который можно невключать
.gitignore - файл создаем для исключений
в проект

== Commit 
git commit --amend - ручное, интерактивное добавление в коммит


=== Откат и удаление

git show some-branch:some-file.js - взять файл из другой ветки

git checkout 85456c4560fsf - переключиться на коммит для просмотра
git checkout master - обратно на последний коммит


git revert -n - мягкий откат

git checkout man/git.txt - отмена изменений файла до комита
git checkout -- file.txt

git reset --hard HEAD~2 - жесткий откат на 2 коммита назад
git reset --hard commit - жесткий откат с удалением

git reset --soft HEAD~2 - оставляем изменения в файлах, удаляем историю
коммитов


= Сброс и откат:
git reset --hard {{some-commit-hash}} — вернуться на определённый коммит в
истории. Все изменения,сделанные после этого коммита пропадут.

git reset {{some-commit-hash}} — вернуться на определённый коммит в истории.
Все изменения, сделанные после этого коммита, получат состояние «Not staged for commit».
Чтобы вернуть их обратно, нужно использовать команды git add и git commit.

git reset --soft {{some-commit-hash}} — вернуться на определённый коммит в истории. 
Все изменения, сделанные после этого коммита, получат состояние «Staged for commit». 
Чтобы вернуть их обратно, нужно использовать команду git commit.


=== Ветвление

git branch - просмотр веток

git checkout -b NEW_BRANCH - создать ветку и перейти на нее
git branch New-branch - создать ветку

git checkout HEAD~2 - создает ветку относительно коммита
git checkout commit/branch - открыть коммит или ветку в отдельной ветке

git branch -D - удалить ветку
git branch -d Branch_name - Удалить ветку
git push origin --delete Branch_name - удалить ветку на сервере

git merge --no-ff - слить ветки
когда сливаем ветки необходимо переключиться на основную (master)

git merge 'features' - сливаем 'features' branch
git cherry-pick - переносит коммит из одной ветки в другую. Создает данные на
основе другой ветки.

git show some-branch:some-file.js - взять файл из другой ветки

=== Параметры запуска


=== Работа с сервером

bare-repo - репозиторий без рабочих файлов
git clone ~/repo - копируем локальное хранилище, нельзя редактировать repo
ssh git clone ssh://git@git:/opt/repo - доступ ssh, настраиваем ключи
  - http(S) - необходимо настроить веб-сервер на чтение и запись
  - git-protocol - встроенных протокол без авторизации

git clone git@github.com:user/repo.git - что равняется 
git clone ssh://git@github.com:user/repo.git

git clone - копировать репо из удаленного хранилища


git pull - обновление и синхронизация с основным хранилищем

git pull --rebase - заберёт изменения из удалённой копии ветки, а потом
накатит ваши незапушенные коммиты после последнего коммита удалённой ветки.


git push -f - перезаписать удаленную ветку (в случаее соло работы)

git push --set-upstream origin new_brach - создать ветку на сервере и запушить
git push origin master - отправить данную ветку на сервер

git push origin --delete Branch_name - удалить ветку на сервере


=== Тips&Tricks

= Как синхронизироваться с форкнутым репозиторием
upstream - name repo
git remote add upstream <original-repo-url>
$ git fetch upstream                 # update local with upstream
$ git diff HEAD..upstream/master     # see diffs between local and upstream/master (if there is no diff then both are in sync)
$ git pull upstream master           # pull upstream's master into local branch
$ git push origin HEAD               # push to your forked repo's remote branch



= Генерация патча
git format-patch -o /tmp/ 

= Клонировать последний коммит:
git clone --depth=1 https://github.com/flant/werf.git

= Клонировать только определенную ветку
git clone --depth=1 -b docs_ru https://github.com/flant/werf.git werf_2


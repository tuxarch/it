Современные операционные системы 
Таненбаум	4-е издание  2015 год
=====================================



Что такое ОС?
Взгляд сверху вниз:
Предоставляют прикладным программистам абстрактный набор ресурсов для
разработки.
Снизу вверх
Организует управление ресурсами компьютера

Система пакетной обработки - формировала пакет заданий и выполняла его по мере
освобождения ресурсов
ОС разделение времени - Unix
ОС реального времени - каждой операции жестко выделяется время.
Используется в промышленном производстве, авиации, медицине.
ОС смарт-карт - требуется управление ресурсами, памятью.

Процесс - запущенная программа
Каждый процесс работает в своем адресном пространстве - список ячеек куда
процесс может писать и читать.
Адресное пространство содержит код выполняемой программы,
данные этой программы
стэк
Указатели на регистры, ресурсы, список открытых файлов, связь с другими процессами

Таблица процессов - хранит информациию о процессах

Блочные и символьные устройства
Блочные для дисков
Символьные для принтеров


Канал(pipe,труба) - псевдофайл обьядиняющий процессы. Канал используется в bash для
перенаправления ввода date > file

Системный вызов - обращение пользовательской программы к команде реализуемой ОС

Основные системные вызовы
Их условно можно поделить на работы с процессами, файлами и тп.
fork() - создает дочерний процесс, идентичный родительскому. Которые затем
выполняются самостоятельно и переменные могут меняться в своих адресных
пространствах
waitpid() - ожидание завершения дочернего процесса
kill()
exit()
open() - открыть файл
close()
read() - чтение в буфер
write()

Типы ядер операциооных систем
Монолитное
Модульное - разновидность монолитного
Микроядро - управление процессами, абстрактный интерфейс для оборудования,
драйверы устройств в пользовательских режимах сервиса.
Экзоядро - выделение ресурсов, памяти.
Наноядро - обработка аппаратных прерываний и передача сигналов в ПО


Процессы.

Создание процессов через:
- инициализацию системы (initV)
- выполнение процессом системного вызова создание процесса (fork)
- запрос пользователя на создание процесса (щелчок в окон интерфейсе)
- инициализация пакетного задания (на данных системах пакет. обработки)

Демоны - фоновые процессы


Иерархия процессов образуется вызовом fork(). В корне лежит процесс init.


Потоки

Зачем нужны потоки?
Там где нужна работа в общем адресном пространстве
Легкость создания, быстрее в 10-100 раз
Увеличения производительности если требуется разделение обращения на запись и
ожидания

Каждый поток имеет свой id, набор регистров, стэк, параметры планирования


Где реализовывать поддержку потоков?
В пользовательском пространстве или в ядре.
Каждый процесс должен иметь собственную таблицу потоков
Гибридный вариант реализации потоков и в ядре и в пользователе


Скорее всего в linux поддержка потоков реализуется на уровне ядра. Тк в
стандарте POSIX имеется описания Pthreads

Мьютекс - бинарные симафоры те (0 или 1)
pthread_mutex_init()



Память
Реализация абстрактной памяти
Снять проблему величины реальной памяти,
Обезопасить процессы друг от друга

Пейджинг
MMU - деспетчер памяти отображающий виртуальные адреса на реальные

Каждое приложение должно иметь свою таблицу страниц

Использование глобальной таблицы дескрипторов и локальной.
LDT таблица есть у каждого процесса
GDT у операционной системы.
Поддержка сегментации отстутсвует на архитектруе х86_64 и cделанна ставка на
страничную организацию.


Работа с физ памятью - свопинг на диск - адресное пространство процесса
делится на страницы - сегментация для упрощения процесса компоновки и
совместного доступа.


Файловая система

Максимальное имя файла в linux 255 байт
Или 255 английских или 127 русских символов
Максимальный размер пути 4096 байт

На диске 
MBR - хранит таблицу разделов и указывает на активный загрузочный блок
В разделах
	загрузочный блок
	суперблок - тип фс
	Таблица о свободном пространстве
	i-узлы - информация о файлах (атрибуты, информация об адресах блоков)
	файлы и каталоги

Журналирование - перед совершением действий происходит пометка о них в журнал,
после удачного завершения пометка снимается. Журнал хранится на диске и перед
загрузкой проверяется его консистентность.


Устройства ввода-вывода
Контроллер прерываний связан с устройствами и который ходит на процессор и
инициирует прерывания от устройств

Наличие DMA доступ к работе с памятью без участия процессора

Буферизация в случаее работы с устройством


Взаимоблокировки - каждый процесс ожидает выполнение другого

Виртуализация на уровне полной модуляции процесора
На уровне поддежки модуляции процессора и технологии виртуализации вендора vtx
На уровне операционой системы - xen (патчится ядро)
На уровне приложения - wine


Облака 
IAAS - infrastructure as a service - виртуализированное "голое железо"
PAAS - platform as a service - наличие ос, бд, веб-сервис
SAAS - software as a service  - доступ к приложению ofice360



Linux

VFS - включает в себя файлы (устройства, сокеты, фс)

При fork() - память копируется только в случае записи от дочернего
процесса. До этого оно обращается к родительскому пространству.

Поддержка потоков в ядре

Clone() - вызов размывающий разницу между процессами и потоками. Нет в UNIX.
Через атрибут грубо говоря указываем видит ли поток адресное пространство, и у
него свое - те он процесс.

Планировщик для реального времени

CFS - планировщик  для процессов 
Completely Fair Scheduler - справедливый
Подсчитывает сколько времени нужно на каждый процесс. Короткие выполняются
сразу. Наличие приоритетности также важно
Данный планировщик является неотделимой частью ядра

Планировщики ввода/вывода BFQ - работа с чтением и записью

Загрузка ядра после обращения граба:
Настраивается стэк ядра - на ассемблере
Определяется ЦП и количество ОЗУ
Вызывает main C-код
Инициализация буфера для сообщений инициализации ядра
Выделяется память под структуры ядра
Инициализаии устройств ввода/вывода
Запуска process0 - установка таймеров, монтрирование корневой системы
Запуск  process1 (init) - запускает демоны, запускает getty на tty
getty запускает login, та уже отдает управление в shell



Каждый процесс имеет адресное пространство
Оно состоит из:
Текстового сегмента - машинные команды программы, не изменяем
Сегмент данных - переменные, массивы
Стэк - на конце пространства - растет вниз. Им управляет ОС


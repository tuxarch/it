Базируется на стандарте POSIX

Minix3 - 4000 тысяч строк кода

Микроархитектура - транзисторы групируются в блоки
Микропрограмма - прошивка процессора

Для управления вычислительным блоком используется набор команд
от 50-300
Файловая система исполняется в пользовательском режиме

Процесс - это исполняемая программа. Каждый процесс имеет свое адресное
пространство.
Таблица процессов
Приостановленный процесс - образ памяти с данными в таблице процессов

Дерево процессов - связанные процессы которые к тому же нуждаются в
межпроцессорном взаимодействии.
Таймеры ответа при взаимодействии процесса

Идентификация пользователя и групп

Файл - поименнованная область данных.
Системные вызовы для работы с файлами

Каталог - место для хранения ссылок на файлы и другие каталоги

Файлы и каталоги образуют иерархию файловой системы
присваивается 11 разрядный код в котором указывается права доступа
При доступе к файлу ядро присваивает файлу дискриптор - неотрицательное целое
число. В случаее осутствия доступа присваивается отрицательное.

Монтирование файловых систем

Представление устройств в виде файлов
Блочные и символьные файлы

Канал - файл который служит для связи двух процессов

Взаимодействие между ОС и программами происходит по средствам системных
вызовов

Системный вызов похож на вызов процедуры ядра

53 системных вызова

fork - создание нового процесса. Создает точную копию исходного процесса, с
дискрипторами. После создания процессы начинают жить отдельно
Процессы могут узнать кто из них родительский, а кто дочерний по средствам
вызова.

waitpid - родительский процесс ждет когда выполнится потомок
exit - возвращает статус выхода от 0 до 255, в дальнейшем используется для
передачи параметров родительскому процессу

Память делится на текст, данные, стек.
Данные растут снизу, а стек сверху вниз

brk sbrk - выделет сегмент данных

getpid - возвращает id процесса
sigaction - обработка клавиатурных прервываний. Процесс сохроняется в стек и
осуществляется переход к выполнению прерывания.

kill - позволяет послать сигнал процессу
alarm - указывает интервал времени через которое нужно послать allarm

creat, open - создание файла

mknod - создать псевдофайл
stat, fstat - информация по файлам
pipe - создается канал
sync - сбрасывает кэш на диск

Компоновщик собирает из объектных файлов исполныемый модуль

Монолитное ядро - все скомпилированные файлы собираются в один объект
Все процедуры видят друг друга. Но иерархия может вызовов может
присутствовать.

Порядок обработки прерываний:
Помещаем параметры в стэк, вызывает библиотечную функцию, библиотека помещает
номер системного вызова в регистр, переход в режим ядра trap, ядро выбирает
обработчик вызова из таблицы указателей. Запуск обработчика и возвращение
управление пользовательской программе и очистка стека.

- пользовательский код
- библиотека вызывающая системные вызовы
- обслуживание системных процедур

Процессы
Машина выделяет от десятков до сотен милисекунд.
Паралелизм и псевдопаралелизм.

Создание процессов
- при инициализации системы
- системный вызов форка
- действие пользователя
- пакетное задание

fork & exec

Завершение процесса: нормальное, ошибка, фатальная ошибка, завершение другим
процессом

Reincarniation server - перезапуск упавших процессов
init запускает сценарии из /etc/rc
init читает /etc/ttytab для доступа к терминалам где запускает getty спомощью
fork()
После ввода пароля запускается его проверка login и затем происходит exec
шелла

Небольшой планировщик и таблица процессов

Таблица дескрипторов прерываний, вектор прерываний содержит адрес обработчика
прерываний
Приоритетность процессов

Потоки выполнения - несколько процессов работает параллельно в одном адресном
пространстве

Таблица потоков
Управеление потоками происходить в пользовательском режиме

Процессы - их взаимодействие и совместное использование данных

Запрет на прерывания

Симофор while(turn!=0) и активное ожидание

Семафор - некоторое положительное число которое уменьшается ли увеличивается в
процессе выполнения комманды. Если оно становится меньше нуля, то управление
передается другому процессу.

Монитор - набор данных, процедур. К которому обращается процесс за доступом.

Проблемма deadlock

Планирование
Равноправие
Максимальная загрузка системы и оборудования
Стабильность и гарантированное исполнение

FIFO
Самый короткий - самый первый
Приоритетное планирование

Новому процессу назначается повышенный приоритет. Приорет дает право на
использование процессора большее время.

Системы реального времени: медиаплееры
жесткие системы - нельзя отклонятся
гибкие - отклонения не желателен

Переключение потоков на уровне ядря затранее чем переключение в userspace

На ассемблере написанны обработчики прерываний, переключение контекста и
механизмы управления памятью

Для взаимосвязи процессов используется три системных вызова. Если бы мы
реализовали эти вызовы на сетевом стеке то мы бы получили распредленную
систему.

Многоуровневая система очередей - 16 очередей

/include - содержит константы и для решения общих задач

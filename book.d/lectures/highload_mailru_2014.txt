Highload 2014
По мотивам лекций mail.ru
https://www.youtube.com/watch?v=uYhQ2ot3XFg&list=PLrCZzMib1e9qozAkJm0-IyBO2pkUdBLlM

##########################################
1. Введение

В чем измеряется нагрузка?
Количество запросов в секунду rps

SLA mail.ru 99.9 - 10 часов в год недоступен

Узкое место
В основном база данных

CGI - прикручиваем внешние программы к web-сервису. Много минусов.
Взаимодействуют через STDIN/STDOUT
FastCGI - работают через сокеты, не перезапускает скрипт, а запускает новый.

apache status - какие процессы исполняются
Php - кэширование запросов

Неблокирующая обработка (epoll системный вызов)


################################################
2. Сетевая подсистема

1Гб/с - 900-800мб/с реально
120 тыс пакетов в секунду
Можем упереться в количество пакетов, а не в скорость

Bonging - несколько физ. интерфейсов в логическое
4 соединения дают 3.5Гб/с

MSI-X 
Отдельные очереди для input/out пакетов
Считает контрольные суммы для http

Ставят 10GB - на сервера

cat /proc/interrupts - какие прерывания и кто их обрабатывает
Должно быть все равномерно, на процессах.

iperf - позволяет создать нагрузку между узлами (клиент-сервер)


2014
Трафик вконтакте - 1Тб/c трафика отдают
однокласники - 32Гб/с
все mail.ru - 200Гб/с
Мощность Ddos - 100GB/s < 1Tb/s(2018)

whois - кому принадлежит домен
traceroute - посмотреть маршрут

До японии и австралии за 270 мс

ttl - пакет умер, хост должен ответить об этом imcp
Опция частенько отключена


Посмотреть на путь из крупных провайдеров:
looking glass:

traceroute.net.ru
lookinglass.org
lg.vk.com
lg.megafon.ru

Один запрос одно действие - 4 запроса*50mc для построения страницы


Последний блок ipv4 адресов выдан в 2013 году


10.0.0.0
192.168.0.0 - сети отбрасываются внешними маршрутизаторами

TCP сессия 
SYN - флаг синхронизации, Номер байта с которого идут данные, sequence number
ACK - acknowledgment - подтвержденные данные

Длинна пакета 1,5 кб
jomboframe - можно использовать в локальной сети

Потеря пакетов в 1% может сломать всю систему. Дав нагрузку

Сервер держит от 50 до 100 тыс соединений.
Значение Keepalived определяет сколько соединение может висеть.

Применяйте TCP там где нужна надежность. 
UDP - может загрузить сеть, нужно регулировать скорость в случаее нагрузки.

Пиринг
Точка обмена трафиком между провайдерами 
MSK-IX - московская точка обмена трафиком.
Картельный сговор 5 крупных компаний
Перенаправляют трафик через Хелсенки из-за стоимости

Нет в России CDN, гоняем через москву
Vitio, Genix


Тюнинг TCP
/etc/sysctl.conf
Норм настройки
net.ip4tcp_max_syn_backlog = 32768 
net.ip4tcp_max_orphans = 131072
net.ip4tcp_max_tw_buckets = 180000 трэкинг соединений 

#################################
Лекция 3. Протокол HTTP
Хорошая скорость загрузки страницы 1 сек

firebug - скорость загрузки сайта
webinspector - chrome

150кб - средний размер страницы

HTTP - заголовки
Expires - заголовок время жизни страницы
Last-Modified - браузер делает GET запрос на устаревания файла (нужно
отказываться)
Accept-Ranges - можно не качать весь файл, а только кусок

###################################
4.Масштабирование нагрузки

База данных скорее всего будет узким местом.

round robin может кэшироваться провайдерами
Дешевое и простое решение.

DNS - работает upd, но может и по tcp. Незабудь расшарить порты

GeoDNS - по региону ответики
Очень не точная штука до 20% процентов в РФ неопределенны

Хардварные балансировщики:
cisco csa

Програмные:
lvs 
балансировка на NAT - легкое решение но ресурсоемкое
балансировка спомощью vpn
балансировка MAC - легкое

vrrp/carp -
ip адрес забиндин но не анонсируется arp запрос, тачки опрашивают друг друга,
отваливается один, второй подхватывает ip.

Балансировка на основе маршрутизации bgp. Отключается в течении 30 секунд.
На каждой тачке стоит демон bgp.

L7 балансировка:
делаем redirect прокси - отправляем на другой сервер
Зеркала сайтов - тяжелое наследие 00, синхронизируется rsync
Умирает балансировщик - умирает система. Cisco договор об поддержке не
работает.
Надо иметь 2 балансировщика

Балансировка на уровне приложения, может быть хэш функция на клиенте

#####################################
Лекция 5. Оперативная память

Типичный сервер:
16 CPU X 4 core X 2 thread pear core 16GB X 2SATA x 2Tb
64 CPU X 8 core X 2 thread pear core 192GB x IQ квартал

2-8  NIC  

Частота одного процессора 1800mHz

CPU - северный мост (память) - южный мост (USB,SATA,PCL-e)

NUMA современные процессоры - RAM память привязана к определенному СPU.
CPU соседний будет ходить через запросы к CPU

Static RAM - транзисторная память на базе тригеров дорогая, быстрая на ней сделаны
кэши
Dynamic RAM - транзистор с конденсатором - Оперативная память

Скорость доступа к памяти
регистры 1 цикл
Кэш - 2-10 циклов
ОП - 240 циклов

Литература:
https://people.freebsd.org/~lstewart/articles/cpumemory.pdf

Устройство кэша
Tag - cache set - offset 
Метка - Идентификатор строки - Смещение

Кэш при последовательном считывании данных идеально ляжет в кэш

Идеальное использование ресурсов каждый поток работает на одном ядре со своей
банкой памяти и не интенсивно взаимодействует с другими потоками последовательный доступ к памяти
Современные процессоры оптимизируют доступ к памяти

Кэш ЦП быстрее Кэша в оперативной памяти. При высокопроизводительных системах
это существенно.

Скорость позиционирования головки на диске 4мс при случайном доступе

SSD - равномерное использование блоков для записи
Оперативная память стоит столько же что SSD


Кэширование в ОС:
Свой кэш у ОС
ОС представляет диск - как страничное адресное пространство по 4Кб
Блок считывается в дисковый кэш, программа за тем идет на этот кэш

Чтобы программа сама могла ходить на диск используется вызов oderect()
Тогда нужно реализовывать все программно.

Асинхронное обращение к диску плохо реализованно.

Ос тратит все свободную память на кэши, 

mmap - обращаемся по адресам памяти, и подтягивается операционкой

################################
Лекция 6. Базы данных и дисковая подсистема 

SATA - 2Тб - cache 64 mb - 120mb/s - 12/6ms(чтение/запись)
SAS - 300Gb - cache 16mb - 200mb/s -  4ms
Одинаковый интерфейс - SAS - может работать с SATA, обратно нет.

DDR2 - 23Gb/s - 50ns
L3 Cache - 140GB/s - 13ns
L2 Cache - 200Gb/s - 4ns
L1 Cache - 700GB/s - 1ns

SATA - для логов
SAS - для баз данных
SSD - для кэширования

RAID 0 - размазывание блоков по дискам
RAID 1 - зеркалирование
RAID 5 - запись блоками+гуляющий блок с чексуммой 
RAID 6 - запись блоками+2блока с чексуммой
RAID 10 - два зеркала записанных поблочно

В случае необходимости восстановления сильно растет нагрузка на весь raid.
В программных рейдах растет назгрузка на цп в случае работы с 5,6

mdadm - можно регулировать скорость восстановления

Хардварное устройство: шкаф в который вставляются диски
Дорогие, что внутри неизвестно, заголовки диска нестандартные которые содержат
существенную информацию, затер потерял. Нужно два рейда таких для восстановления. 
mail.ru не использует аппаратные raid

Программный RAID:
Возможность поднять диск на другом устройстве. Совместимость.
Медленнее, может возникнуть проблема рассинхронизации.
Программный рейд используется в mail.ru

Системный диск делается в RAID1
Базу данных собирают на RAID10

На сервере 4 диска - 2 диска под систему в RAID1, 2 диска в логи
Бюджетный сервер 2 диска - разбить крест на крест, RAID1 и  RAID0

1000 серверов 2-3 сервера стабильно не работают.

Ext4 - хороший выбор, работает с мелкими файлами
XFS - для больших массивов, проблемы с производительностью всплывают проблемы
с чексуммой.

Lvm
менять размеры дисков
Делать snapshot в режиме copy on write. Новыe блоки создаются в сторонке и не
затирают старые данные.

Базы данных:
PostgreSQl - интерпрайз база. Для сложных транзакций
Проблема с вакум (сбором мусора)


MySQL - быстрая и примитивная. Можно легко потюнить.
Репликация
MySQL:MyISAM
Простой бинарный формат - можно распарсить руками
myisamchk - проверка базы, после отключения питания
Нет никакой консистентности

MySQL:InnoDB
поддержка транзакций, медленнее MyISAM
Все в одном файле (файлы слинкованны)- сложность бэкапа. На реплике остановить
базу, сделать lvm снапшот и перенести.

Реплекация MySQL:
Без оптимизации запросов к реплике или с (roll lavel)
MyISAM:
Делаем бэкап с реплики - тормозим базу - делаем запись на диск (flash) -
забираем данные.

InnoDB: Все в одном файле (файлы слинкованны)- сложность бэкапа. На реплике остановить
базу, сделать lvm снапшот и перенести.

Мастер сгорает - подключаем слайв в мастер, а новый мастер подключаем в слайв.

Приоритеты обработки запросов - сделать приоритетным чтение.

deadlock - взаимная блокировка процессов может случиться.

Читаем данные с реплики

Как добавить в базу данных столбец:
делаем ALTER TABLE на реплике
Блокируем мастер на запись
Ждем когда реплика догонится
Переключаем нагрузку на реплику, а мастер ставим в слайв


Проблемы с базой:
Одна большая база - 
MySQL - 10тыс соединений придел для базы (mysqladmin status - посмотреть)
Нет места на диске
Workset не влезает в ОП
Медленный поиск по большим индексам
Блокировки на транзакциях

Чем больше трэдов тем больше блокировок. Смотри сколько трэдов
Postgres - через процедуру fork()

Шардинг
Быстрое и медленное (авторизация и транзакции)

Советы не использовать
JOIN - блокировка двух таблиц, создание временных таблиц
транзакции 
отключить кэш-запросы
статистику забирать с реплики

LiveJournal - был построен на mysql
1 сервер
2 сервера - web+data- 2eth - по сети к базе
4 сервера - 3web+1data - плохая балансировка
5 серверов - проблема с балансировкой и базой - добавление реплики
20 серверов - 2ingres+12web+6dat - есть lvs - (прокси - апач- перл - база)

"Зачем нам столько копий одного контента? Используем шардирование
Есть главная база пользователей - она хранит номер кластера где хранятся
данные пользователя
Три базы нужно уже минимум"

Memecached - отдельный сервер с кэш
Использовать memorybase

Так работает mail.ru

###############################################
Лекция7. Типовые архитектурные решения

фронтэнд - бэкэнд
бэкенд изолирован во внутренней сети

Запрос на поиск по сайту может положить систему. Кэшируем, индексируем, ищем
по репликам.

Разбивка контента на группы:
медленные и быстрые 
важные, неважные

Если ожидаются высокие нагрузки выбираем c++
Для скорости разработки python

Как обработать ошибку?
Показать заглушку
Сходить на другую тачку
Отдать старый кэш

Растет загрузка - отключаем ненужные компоненты

##################################
Лекция 8. Архитектура реальных проектов
Три способа как сделать проект:
подражание
горький опыт

_Стартовая страница - легкая статическая
В первую очередь должны выполняться важные функции

lvs loadbalancer - 96cpu-100GB-8eth
lvs tunneling - litefrontent - база
		sf - сервер авторизации и подгрузки 

Сервер отвечает напрямую минуя балансировщик

Свой самописный сервер

_Почта
RR DNS - loadbalancer - lvs gre - frontend - casandra?
	 loadbalancer		 pop
				 smtp (нет балансировки?)
				 mx

Сначало был NAT - уперлись 900mb/s

На базе данных 10тыс соединений много. В конфиге указать количество соединений в
конфиге

Сложные но редкие запросы обслуживаются на perl
apache - mod_perl 

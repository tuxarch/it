Highload 2015 
Конференция Бунина
https://www.youtube.com/playlist?list=PLH-XmS0lSi_xEOn_ZSTqGRUtxIhXdpcWh

#######################################
1. Горизонтальное масштабирование
Вертикальное - расширение ОП, дисков и тп.
Горизонтальное - ставят сервера и организовывают взаимодействие

ab, siege - проверка web-сервера
300ms - это норма для сервиса

Обновить php, потюнить OpCache - скрипты всегда в памяти
Добавить индексы в бд Mysql
Включить кэш (memcache, redis)

Highload - проект перестает справляться с нагрузкой. Нужно масштабирование
горизонтальное.

Выигрываем время кэшами и оптимизациями.
Систему нужно постоянно мониторить.
Monit, munin - системы монитринга
Rollbar, sentry - собираем ошибки в одну пачку

Google Analytics, mixpanel - внешние сервисы подключаем для мониторинга.


Обойтись без прокси - используем dns round robin

ip-hash - используется для поддержания сессии. Есть поддержка в nginx.

Работа с файлами
Nfs - плохо
GlusterFS - работает быстрее NFS
Раздавать файлы nginx

Базы данных:
160млн строк и база жива (со смехом)
Репликация master-slave
	   master-master
	   руками
Шардирование
Партицирование

Master-slave: пишем на master, читаем со slave ил master
Читаем больше чем пишем.

Реплицирование происходит не сразу и лагает. Смотрим SHOW SLAVE STATUS.
Медленная сеть, не справляется реплика, слишком много слейвов.

master-master
Репликация занимает больше, поломка

Шардирование:
По юзерам, сложно собрать запрос со всех шардов

Поэтому начинают применять распределенные базы:
cassandra

Фоновая работа -
AMQP - rabbitmg 

Чем меньше связанности в системе тем лучше
Системы бьются на части и взаимодействуют между собой через интерфейсы

Ресурсы:
insight-it.ru, google sclability

linode.com, digitalocean - тестовые среды

#################################

2. NoSQL - базы
key/value базы
Redis, Memcached, Riak  

document_store - структура типа json
ElasticSearch 
MongoDB

column_store - файлы хранащие колонка
Cassandra, 
vertica - имеет sql интерфейс

По типам данных:
графы,


CAP теорема:
AP - распределенная система - даст ответ
CP - если и даст ответ, то ответ будет надежным

Когда использовать такие БД?
Высокая масштабируемость
Кэширование

Использовать буфер перед базой для обработки запросов

Для хранения документов
Для полнотекстового поиска

Проблемы:
Много вложенных данных

Поддержка json в postgres

Бэкап в noSQL - не нужен, тк работают в кластере.
Или копируем файлы, или програмные тулзы

Redis лучше memcahed

##############################
3. Кэширование Memcached.

freshness - свежесть данных
validation - проверка на свежесть

Что кэшировать: html, js, обьекты
Время жизни кэша указывается в HTTP заголовке

Смотри статистику кэша:
Работа кэша часть нашей системы.

Мониторим кэш

#############################
4. MySQL - репликация

Репликация не дает масштабирования на чтение

Виды репликаций:
 cинхронная - прошли на удаленных тачках
 асинхронная - доступны только локально
Уровни:
 Логические записи
 Физические - DRBD, ZFS - что-то не популярно

####################
5.Производительность запросов в postgres
Настроить память, настроить диски, автоваккум, и тп. После переходим к
оптимизаци запросов.
Плохое железо
Ненастроенная база - отключен или ненастроен автоваккум,
Оптимизация запросов

Какие вопросы самые загруженные? И начинаем оптимизировать их.

pg_stat_statements - модуль для статистки.
pg_utils - для работы со статистикой, смотрим статистику.

Плохой запрос 123 ms? Все относительно.
Что за запросы? Приносят ли они нам денег или нет?

EXPLAIN ANALYZE, ROLLBACK - анализ? или оптимизация?

join максимум на 10 таблиц. Сотня это уже пздц.

Подвиндой плохо работает
Если вылетает из индекса и переходит к таблицам. Неправильно настроен
автовакум.

##################################
6. Принципы и приемы обработки очередей

Транзакция должна поддерживать роллбак

Минусы:
Больше операций на задачу

Web-apps
Пользователь на сайте что-то нажал, хендлеры формируют сообщение в очередь, очереди
разгребаются.

###################################
7. Основы индексирования MySQL
Архитектура MySQL
Клиенты - Управление подключениями - парсеры, исполнители,кэши - интерфейс
хранилищ - MyISAM,InnoDB.

Индексы могут не работать при хитрых условиях, сдвоенный WHERE

############################
8. Тарантул
NoSQL в памяти на базе LUA aplication server

Докементо-ориентированная - те json
Индексы
Транзакции

###############################
9. Шардирование базы данных

Шардинг - вертикальное, горизонтальное
Горизонтальное по разным инстансам

##############################
11. Как найти узкое место на сервере
http://brendangregg.com/linuxperf.html

Посмотреть количество соединений на nginx
netstat -ntp | grep 8080 | grep -c ESTAB
netstat -ntp | grep 8080 | grep -c TIME_WAIT

sy, si - в топе %40 говорят о работе ядра, 
На скольких ядрах выполняется приложение

подключиться qdb -ex к демону

perf top - какой модуль ядра юзается
cat /proc/net/ng_conntrck | wc -1


iotop - кто генерирует ввод вывод

Смотрим файл куда пишется 
strace -e write -p 433
ls -l /proc/433/fd/8 

Если в top все хорошо
большой idle, 
strace -c -p PID 
Процесс лежит на мьютексе futex
Сколько ядер загруженно?

################################

12. Балансировка трафика в нагруженной системе
Та лекция что я искал.

На канальном уровне 
Балансировщик выбирает mac и пересылает пакет нужному серверу. Минуя
балансировщик идет ответ клиенту

Без балансировщика:
На arp-запрос отвечает мултикаст серверов. По алгоритму 
на серверах определяется обрабатывать запрос или откинуть. Пример четность,
нечетность mac-адреса
Минусы: работает только в одном сегменте сегменте. 
linux virtual server - реализует данную функцию.

На сетевом уровне
Подмена dest ip, передать балансировщику обработанный ответ.
растет нагрузка на балансировщик
linux virtual server

На транспортном уровне
ECMP алгоритм - на роутере два маршрута одной стоимостью. Происходит
равномерная загрузка маршрутов.
В рамках одной сессии попадали на нужный сервер. Есть решение на cisco -
perflof, perdestination.
bgp - автоматизация добавления и удаления узлов.

Глобальная балансировка
DNS round robin - сервер в циклическом порядке отдает ip
Легкость реализации, 

Full_Proxy - смотрим заголовки, добавить заголовки HTTP с ip куда пересылать
Распределять статику и логику.
HAProxy, nginx

Redirect
Балансировщик отдает ip адрес удаленного сервера

anycast 
один ip, но разные метрики до него. Следовательно трафик придет в ближайший
ДЦ.
Провайдеры передают трафик там где им более выгодно.

Алгоритмы на DNS - чтобы более распределить нагрузку.
Учет source ip 

################################
13. Файловые хранилища

Файл - поименнованные данные
Хранить или отдавать?

Дедупликация - одинаковых файлов быть не должно

snapshot - lvm бесполезные снапшоты
zfs - хорошие снапшоты

stateless - нет фиксации результата
statefull - 


Отход от дисковых массивов, в том числе от аппаратных.
Вылетел один диск - для восстановления нужно прочитать в 4 раза больше.

CAP теорема:
Данные всегда консистенты и доступны, но на одном сервере
Всегда консистентны, и распределенны, но доступ ограничен
всегда доступны и рапределнны, но не консистенты

Большая СХД 
Если есть горизонтальное масштабирование 
DRBD - компьютер кэширует данные и не читает с диска. Нужны спец ФС.

OCFS2 - распределенная фс для БД oracle

CEPH/luste/LeоFS - медленно
ребалансинг - пожирает ресуры


Базы данных в 1млрд строк
Базы данных проще распределять

Резервное копирование - защита от ошибок оператора

Если есть возможность ставить один сервер под БД

#####################################
14. Современные ОС

Ядро слишком медленное для специфической функции

NUMA - кластера


#######################
Мониторим 
kasperjs - мониторим сервис

Оповещение должно приходить раньше

Система мониторинга Grahite грузит процессор

Запись ssh-сессий

######################
17. Провайдеры дата-центров
Все врут, все решает персонал, 

Покупаем место в стойке и заезжаем
Продают виртуальный трафик между vm

В SLA - указывается характеристики медленности

Больше чем 3 девятки - нужна вторая площадка

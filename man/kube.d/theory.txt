Система оркестрации контейнеров.

Основные возможности:
Монтирование хранилища
Разделение прав доступа
Разделение кластера между пользователями
Работа с секретами
Проверка жизни приложений
Копирование экземпляров приложений
Горизонтальное автомасштабирование
Сервис дисковеринг
Балансировка
Мониторинг
Логирование
Отладка приложений
Обеспечение авторизации и аутетификации


Object/Абстракции:
Node - хост на котором запускаются поды
Label - значение которым помечают обьекты
Annotations - метаданные для описания обьектов
Selector - выбирает обьект на основе label
ReplicationController - сильно устарел, проверяет вхождение по имени
ReplicaSet - обьединяет поду по селектору, гарантирует количество инстансов
Deployment - описывает конечное состояние, количество и образы контейнеров
Pod - один или несколько контейнеров связанных логически
Service - устанавливает логическую группу подов и определяет как с ним
общаться
Volume - интерфейс подключения дисков, подключается в контейнер
	EmptyDir
	persistenDiskClaim
StatefulSet - позволяет дать конкретное определение обьекту
Secrets - обьект содержащий чувствительную информацию. кидает tmpfs
Name - имена для обьектов
Namespace - простраство имен использующиеся в кластере. Нужен для крупных
проектов, с большим количеством пользователей. Виртуальный кластер с
совместным использованием подов и стораджей.
DaemonSets - запускает служебный под на каждой ноде. Storage, log, monitoring
Ingress - набор правил для подключения к кластеру (правила, nginx, traefik)
Garbage Collection - Удаление ненужный объектов по селектору
TTL controller - указывает время жизни завершенных обьектов
ConfigMaps
HorizontalPodAtuoscalers 

----------------------------------------
Компоненты:
-Master
kube-apiserver - фронтэнд управления
etcd - хранилище конфигурации распредленное
Kube-scheduler - планировщик отвечает за распределение подов на нодах
kube-controller-manager - отвечает за запуск контроллеров
cloud-controller-manager - отвечает за взаимодействие с провайдером облака


-Node
Kube-proxy - отвечает за передачу трафика
Kubelet - управляющий компонент от мастера к ноде

----------------------------------------
## Service type
- ClusterIP - адрес доступный внутри кластера другим приложениям. Без внешнего
доступа.
Можно получить доступ через прокси и дашборд
kubectl proxy --port=8080
http://localhost:8080/api/v1/namespaces/default/services/<SERVICE-NAME>:<PORT-NAME>/proxy/

- NodePort:
Привязывает сервис к порту на ноде
nodePort - параметр указывает какой порт открыть
Используется для демонстрации

- LoadBalancer:
Создаем балансировщик на сервис. Весь трафик с порта идет в сервис. Отсутсвие
управелния соединением и роутами.

-ExternalName - использует dns имя

- Ingress: не сервис, а точка входа в кластер.

----------------------------------------
## Ingress controllers

GCE, nginx - контролеры по умолчанию

Нет из коробки балансировщика трафика, для этого используем confd для
настройки nginx, haproxy. Или решения облака.

----------------------------------------

## Volumes

Хранение данных:
GlusterFS, Ceph, Cinder, vShere, Quobyte, 
Cloud storage

PersistentVolume - часть хранилища в кластере
PersistentVolumeClaim - запрашивает размер и права в хранилище
VolumeSnapshots - создание снапшотов
StorageClass - более глубокая настройка волюма

----------------------------------------

## Performance
Позволяет распределять поды по нодам селекторам (tier)
Возможность задать приоритетность для подов через PriorityClass

Повысть производительность шетдулера через указание % необходимых рабочих нод
percentageOfNodesToScore

Установить квоты на ресурсы для группы, пользователя

Ограничения по подам задается через resources:
limit - максимальное значение, невозможно превысить
request - запрашиваемое - те рабочее
kubectl top pod name - полчить информацию по ресурсам
2 - 2 цп
0.5 - загружать на половину



----------------------------------------
## Secrets 
Пароли могут храниться на смонтированном волюме
Загружаться в kubelet при подгрузке пода
(Можно получить доступ из борда)

kubectl create secret generic  - создание секрета на базе файла
k get secrets 
k get desctibe secrets/user-pass

Создать через yaml, предварительно зашифровав пароли в base64

Использование переменных среды с последющим объявлением их чере env-cекцию

Возможно примонтирование ssh ключа
k create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub

----------------------------------------

## Access - организация доступа к ресурсам кластера

k config use-context 
----------------------------------------


Перезапустить  deployment
kubectl scale 0 && kubectl scale 1



----------------------------------------
## Addons
Запускаются в kube-system namespace
DNS
DASHBOARD
Monitoring
Logging

----------------------------------------

## API
alpha - не рекомендуется для продакшена

apiVersion: v1 - /api/v1   legacy group


Heapster - собирает информацию с сadvisor пишем данные в influxDB.


Технологии
flannel - оверлейная сеть



Сеть:
calico, weave, flannel

Deployment - ReplicaSet - Pod


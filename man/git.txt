VCS - version control system /Система контроля версий

## Options
-C <path> - путь к рабочей директории

Централизованные vcs - tfs, svn (subversion)
Децентрализованные - mercurial, git (что одно и тоже)

Хранение на разных машинах, работа без постоянного соедниения с центром
________
Структура данных 
	дерево
	корневой узел
	commit - сохранение изменений
	снапшот
	HEAD - указатель на текущий коммит
	
_______________
Основные комманды

cd folder && git init - инициализация репозитария
cd folder.git && git --bare init - инициализация без рабочих файлов

git status
git log --graph - просмотр коммитов и состояния проектов

git add file
git add -p file - построчный коммит
git add . - добавить все


git diff HEAD - показывает разницу между текущими изменениями и коммитом

git reset --hard commit - жесткий откат с удалением
git clone - копировать репо из удаленного хранилища
git push origin master - отправить данную ветку на сервер
git pull - обновление и синхронизация с основным хранилищем
	--rebase - мои изменение записать поверх данных сервера
	git reset --hard HEAD && git pull - збросить локальные изменения
__________

Ветвление 

git checkout -b NEW_BRANCH - создать ветку
git checkout commit/branch - открыть коммит или ветку в отдельной ветке
git remote show origin - информация по удаленному репозитарию
git branch - просмотр веток
git branch -D - удалить ветку

git merge --no-ff - слить ветки
когда сливаем ветки необходимо переключиться на основную (master)
git merge 'features' - сливаем 'features' branch

_______________

Соединение можно организовать на основе
- git clone ~/repo - локальное хранилище
- ssh git clone ssh://git@git:/opt/repo - доступ получить, но сначала создать
нужно пользователя и скопировать ключи.
- http(S) - необходимо настроить веб-сервер на чтение и запись
- git-protocol - встроенных протокол без авторизации
_____________

git cherry-pick - переносит коммит из одной ветки в другую. Создает данные на
основе другой ветки.

git revert - отменить изменения указанного коммита
git checkout HEAD~2 - создает ветку относительно коммита

git stash - черновик позволяет сохранять изменения не прибегая к коммиту
git stash apply - вернуться к изменениям
git stash show - показать состояние черновика

git bisect start - позволяет найти рабочий коммит в случае проблемы
git bisect bad HEAD && git bisect god HEAD~3 - создаем интервал

git ignore (ignore list) - позволяет создавать список который можно невключать
.gitignore - файл создаем для исключений
в проект

git config --global merge.tool - позволяет подключать дополнительный софт

______________

Удобно для разработки применять несколько веток
	
	developer features
	test bag
	live fixit

Конфликт возникает когда есть противоречия в одной и тойже строке.

___________________________________
git clone git@github.com:user/repo.git - что равняется 
git clone ssh://git@github.com:user/repo.git

git command --help - cправка по команде


bare-repo - репозиторий без рабочих файлов

git log 
--author="Alex Kras" — выводит коммиты, сделанные конкретным человеком
--name-only — выводит только названия изменённых файлов
--oneline — выводит сокращённые данные коммита (в виде одной строки)
--graph — выводит дерево зависимостей для всех коммитов
--reverse — выводит коммиты в обратном хронологическом порядке (сначала
старые)
--after — выводит коммиты, сделанные после определённой даты
--before — выводит коммиты, сделанные до определённой даты
-p filename - вывод в файл

git blame filename - определить автора последних изменений для каждой строки в файле
git show some-branch:some-file.js - взять файл из другой ветки

git pull --rebase - заберёт изменения из удалённой копии ветки, а потом
накатит ваши незапушенные коммиты после последнего коммита удалённой ветки.

git commit --amend - исправление последнего коммита
git push -f - перезаписать удаленную ветку (в случаее соло работы)

три состояния кода:
	unstaged - не добавлен в индек коммита
	staged - добавлен в индекс коммита
	commited - закомичен

Сброс и откат:

git reset --hard {{some-commit-hash}} — вернуться на определённый коммит в
истории. Все изменения,сделанные после этого коммита пропадут.

git reset {{some-commit-hash}} — вернуться на определённый коммит в истории.
Все изменения, сделанные после этого коммита, получат состояние «Not staged for commit».
Чтобы вернуть их обратно, нужно использовать команды git add и git commit.

git reset --soft {{some-commit-hash}} — вернуться на определённый коммит в истории. 
Все изменения, сделанные после этого коммита, получат состояние «Staged for commit». 
Чтобы вернуть их обратно, нужно использовать команду git commit.

git revert -n - мягкий откат

dit add -p - построчное применение изменений

git config --global alias.l "log --oneline --graph" - создание алисы

___________________

git reset --hard HEAD - состояние последнего коммита
git checkout man/git.txt - отмена изменений до комита

________________

git config credential.helper store - сохранить пароль


________________

Как синхронизироваться с форкнутым репозиторием
upstream - name repo

git remote add upstream <original-repo-url>
$ git fetch upstream                 # update local with upstream
$ git diff HEAD..upstream/master     # see diffs between local and upstream/master (if there is no diff then both are in sync)
$ git pull upstream master           # pull upstream's master into local branch
$ git push origin HEAD               # push to your forked repo's remote branch



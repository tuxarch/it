/proc/PID/stat - основная информация по процессу
/proc/PID/fd - посмотреть использующиеся файловые дескрипторы
/proc/PID/environ - переменные используемые процессом


lsof - для просмотра дескрипторов более удобнее
Также им можно посмотреть бинарник - txt
		       	  текущая директория - cwd
		          дерикторию выше которой подниматься нельзя - rtd
		          динамические библиотеки - mem



=== Теория:

= Структура процесса в памяти:

- stack (содержит локальные переменные, растет вниз)
- mmap
  ...
  /unalocated memory/
  ...
- heap (анонимная память, выделяемая maloc(), растет вверх)
- bss (uninitialized data)
- init data
- text (program code)


= С позиции ядра процесс представлется как структура имеющая:
{
	Id
	Открытые файловые дескрипторы
	Обработчики сигналов
	Текущий каталог
	Переменные окружения
	Код возврата
}


= Инициализация процесса:

init/systemd процесс рождаемый ядром, остальные от него
с помощью fork() c использованием СOW(копир при записи),они имеют общее адресное
пространство до попытки записи


= Cостояние процесса:

Готов - сразу же после вызова fork()
Выполняется - планировщик поставил процесс на выполнение
Ожидает - в ожидает ввод-ввывод к примеру, сигналы поставлены в очередь
Остановлен - после получения SIGSTOP, ожидает SIGCONT (продолж) или SIGKILL
Завершен - отпрвлен системе сигнал _exit
Зомби - ожидает считывание завершения

Колонка STAT (ps aux) может содержать следующие значения:

R - процесс выполняется или готов к выполнению (состояние готовности)
D - процесс в "беспробудном сне" - ожидает дискового ввода/вывода
T - процесс остановлен (stopped) или трассируется отладчиком
S - процесс в состоянии ожидания (sleeping)
Z - процесс-зобми
< - процесс с отрицательным значением nice
N - процесс с положительным значением nice (о команде nice мы поговорим позже)


= Операции над процессами:
Создание процесса - это переход из состояния рождения в состояние готовности
Запуск процесса (или его выбор) - переход из состояния готовности в состояние выполнения
Уничтожение процесса - это переход из состояния выполнения в состояние смерти
Восстановление процесса - переход из состояния готовности в состояние выполнения
Изменение приоритета  - переход из выполнения в готовность
Блокирование процесса - переход в состояние ожидания из состояния выполнения
Пробуждение процесса - переход из состояния ожидания в состояние готовности


= Сигналы управления процессами:
man 7 signal - справка по сигналам
kill -l

2 INT - Аналог CTRL+C остановка
9 KILL - жесткое завершение процесса
15 TERM - безопасное завершение
19 STOP - остановить процесс
18 CONT - продолжить процесс


nice -n -5 firefox - запуск c приоритетом
renice -n -5 id_proc

Приоритеты процесса
-20 max  до +19 
nice - установка приоритета 
renice - установка уровня в т.ч для пользователя
Высокие приоритеты могут ставить только админы


= PS

Ps использует в своей работе содержимое каталога /proc
Членство в группе proc позволяет просматривать процессы.

ps - информация о процессах aux + фильтр вывода
	-efH - позволяет отображать дерево

pstree - дерево процессов
pgrep - поиск процессов
pidstat - выводит инфо по процессам
kill -s TERM  - завершение процесса (15 сигнал по умолч)
pkill - завершение процесса по имени
killall - завершает группу процессов, а также может использовать имя

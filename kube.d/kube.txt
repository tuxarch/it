=== Kubernetes 
Система оркестрации контейнеров.

== Основные возможности:
Монтирование хранилища
Разделение прав доступа
Разделение кластера между пользователями
Работа с секретами
Проверка жизни приложений
Копирование экземпляров приложений
Горизонтальное автомасштабирование
Сервис дисковеринг
Балансировка
Мониторинг
Логирование
Отладка приложений
Обеспечение авторизации и аутетификации


== Object/Абстракции:
Node - хост на котором запускаются поды
Pod - один или несколько контейнеров связанных логически
Service - устанавливает логическую группу подов и определяет как к ним обращаться
ReplicationController - Конролер запуска реплик на подах, устарел, проверяет вхождение по имени
Label - значение которым помечают обьекты
Annotations - метаданные для описания обьектов
Selector - выбирает обьект на основе label
ReplicaSet - обьединяет поду по селектору, гарантирует количество инстансов
Deployment - описывает конечное состояние, количество и образы контейнеров
Volume - интерфейс подключения дисков, подключается в контейнер(EmptyDir,PersistenDiskClaim)
StatefulSet - позволяет дать конкретное определение обьекту
Secrets - обьект содержащий чувствительную информацию. кидает tmpfs
Name - имена для обьектов
Namespace - простраство имен использующиеся в кластере.
DaemonSets - запускает служебный под на каждой ноде. Storage, log, monitoring
Ingress - набор правил для подключения к кластеру (правила, nginx, traefik)
Garbage Collection - Удаление ненужный объектов по селектору
TTL controller - указывает время жизни завершенных обьектов
ConfigMaps
HorizontalPodAtuoscalers 


== Компоненты:

= Master
kube-apiserver - фронтэнд управления
API-шлюз работающий через REST и сохраняющий состояние в etcd. kubelet
обращается к API-серверу. Разворачивает Pods согласно описанию в YAML ил JSON.
Контроль за ресурсами и пространством имен.

etcd - хранилище конфигурации распредленное
Kube-scheduler - планировщик отвечает за распределение подов на нодах
kube-controller-manager - отвечает за запуск контроллеров
cloud-controller-manager - отвечает за взаимодействие с провайдером облака

= Node
Kube-proxy - отвечает за передачу трафика
Kubelet - управляющий компонент от мастера к ноде


= Порты
4149/TCP	kubelet	Default cAdvisor port used to query container metrics
10250/TCP	kubelet	API which allows full node access
10255/TCP	kubelet	Unauthenticated read-only port, allowing access to node state
10256/TCP	kube-proxy	Health check server for Kube Proxy
9099/TCP	calico-felix	Health check server for Calico (if using Calico/Canal)
6443/TCP	kube-apiserver	Kubernetes API port

== Service type
- ClusterIP:
Адрес доступный внутри кластера другим приложениям. Без внешнего
доступа.
TargetPort - порт контейнера, который нужно прокинуть

- NodePort:
Привязывает сервис к порту на каждой ноде
NodePort - параметр указывает какой порт открыть на каждой ноде
Используется для демонстрации

- LoadBalancer:
Создаем балансировщик на сервис. Весь трафик с порта идет в сервис. Отсутсвие
управления соединением и роутами.

- ExternalName - использует dns имя

- External IP - привязывает сервис к ip

- Ingress: не сервис, а точка входа в кластер.


== Volumes

Хранение данных:
GlusterFS, Ceph, Cinder, vShere, Quobyte, Cloud storage

PersistentVolume - часть хранилища в кластере
PersistentVolumeClaim - запрашивает размер и права в хранилище
VolumeSnapshots - создание снапшотов
StorageClass - более глубокая настройка волюма


== Performance
Позволяет распределять поды по нодам селекторам (tier)
Возможность задать приоритетность для подов через PriorityClass

Повысть производительность шетдулера через указание % необходимых рабочих нод
percentageOfNodesToScore

Установить квоты на ресурсы для группы, пользователя

Ограничения по подам задается через resources:
limit - максимальное значение, невозможно превысить
request - запрашиваемое - те рабочее
kubectl top pod name - полчить информацию по ресурсам
2 - 2 цп
0.5 - загружать на половину


== Secrets 
Пароли могут храниться на смонтированном волюме
Загружаться в kubelet при подгрузке пода
(Можно получить доступ из борда)

kubectl create secret generic  - создание секрета на базе файла
k get secrets 
k get desctibe secrets/user-pass

Создать через yaml, предварительно зашифровав пароли в base64

Использование переменных среды с последющим объявлением их чере env-cекцию

Возможно примонтирование ssh ключа
k create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub


== Access - организация доступа к ресурсам кластера

k config use-context 

== Addons
Запускаются в kube-system namespace
DNS
DASHBOARD
Monitoring
Logging


== API
alpha - не рекомендуется для продакшена
apiVersion: v1 - /api/v1   legacy group


Deployment - ReplicaSet - Pod

= Kubectl 
cli control kubernetes cluster manager


===  Information and loging

k cluster-info   Информация по кластеру и подключению
k get all -n namespaces - все ресурсы в организации
k get nods  - получить список машин в кластере 
k get deployments  
k get pods -w - интерактивный режим 
k get ing - ingress просмотр
k get pv - persistent volume - хранилища
k get pvc - зарезервированное место
k get events  
k config view  
k get services
k logs pods - получить логи из stdout контейнера
k logs pods -f - интерактивный режим вывода лога


=== Run

Запустить депоймент и расшарить его ip. Но в сервисах его нет, но можно найти описание через describe
k run httpexposed --image=katacoda/docker-http-server:latest --replicas=1 --port=80 --hostport=8001


=== Yaml

k apply -f file.yaml - приминить или обновить конфигурацию
k delete  -f file.yaml - удалить обьекты
k get deployments.apps redis -o yaml --export > flask_dep.yml - сохранить 
k replace -f flask_dep.yaml - обновить из файла
k kubectl create -f https://k8s.io/deployment.yaml --record - use http
kubectl create -f <url> --edit - скачиваем и редактируем
k diff - используем для сравнения
kubectl create -f https://application/nginx/ - указать каталог с файлами



### Exec in container

export POD_NAME=$(k get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
k exec -ti $POD_NAME bash
k expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080 - открываем наш порт, зачем стучимся по расшаренному порту, ip
k set image deployments/kubernetes-bootcamp kubernetes-bootcamp=gcr - изменить версию контейнера

k scale deployments/kubernetes-bootcamp --replicas=4 - увеличить количество реплик
k expose deployment hello-node --type=LoadBalancer  
expose deployment 

k set image deployment/hello-node hello-node=hello-node:v2  
update image of you Deployment

создать метку для пода
kubectl label pod $POD_NAME app=v1




### Delete

Удалить все ресурсы на кластере:  
k delete daemonsets,replicasets,services,deployments,pods,rc --all  

Удалить через API:
kubectl proxy --port=8080
curl -X DELETE  'localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/frontend' \
> -d '{"kind":"DeleteOptions","apiVersion":"v1","propagationPolicy":"Foreground"}' \
> -H "Content-Type: application/json"

Удаление по селектору:
kubectl delete deployment,services -l app=nginx

k delete service hello-node  
k delete deployment hello-node  
docker rmi hello-node -f  


### Rollout

kubectl rollout status - статус 

k rollout history deployment redis - история деплоймента
k rollout undo deployment/flask - откатиться на старую версию
k rollout status deployment/flask -w - история изменения


## Expose
k expose deployment http --external-ip="172.17.0.94" --port=8000 --target-port=80 - расшарить на ip на порту 8000


### api
k api-version - посмотреть возможные api 
k api-resources - посмотреть ресурсы


### ConfigMaps
kubectl create configmap game-config --from-file=configure-pod-container/configmap/kubectl
kubectl get configmaps game-config -o yaml\

### Configure
Настроить параметры ядра на нодах
kubelet --allowed-unsafe-sysctls 'kernel.msg*,net.ipv4.route.min_pmtu'


== Работа с kubeconfig
# Создаем файл конфигурации на базе пароля и пользователя
kubectl config set-credentials user/ash-kube.tk --username=user --password=kubepassword
kubectl config set-cluster ash-kube.tk --insecure-skip-tls-verify=true --server=https://3.246.3.4
kubectl config set-context default/ash-kube.tk/user --user=user/ash-kube.tk --namespace=default --cluster=ash-kube.tk
kubectl config use-context default/ash-kube.tk/user

Объединить несколько файлов в один kubeconfig:
KUBECONFIG=file1:file2:file3 kubectl config view --merge --flatten > out.txt
KUBECONFIG=~conf1:conf2 - прокинуть в переменную несколько сертификатов


работа с контекстами:

context:
- name 
- cluster
- user
- namespace




kubectl config get-contexts - просмотр контекстов
kubectl config set-context default - переключение между контекстами





# Создаем секрет для приватного репо, который затем подключаем при пулах
kubectl create secret docker-registry regcred --docker-server=ash-devops.tk
--docker-username=admin --docker-password=passwd --docker-emal=name@mail.ik


# port-forwarding
kubectl port-forward -n ingress-nginx svc/nginx-ingress-prometheus-discovery 10254
kubectl proxy  - позволяет взаимодействовать с API


### Auth
Проверить першишен для пользователя
kubectl auth can-i get pods --as nginx-ingress-role


Работа с cert-manager
kubectl logs -l app=cert-manager -n kube-system --kubeconfig=admin.kubeconfig-pub
kubectl describe challenges --all-namespaces --kubeconfig=admin.kubeconfig-pub


=== Включение отключение нод
k drain node - выселяем ноды с хоста
k uncordon node4 - включаем
kubectl delete nodes node6 - удалить ноду

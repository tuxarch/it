NOT - tf/ft
AND - ttt/tff/ftf/fff
OR - fff/tft/ttt/tft
NAND (AND,NOT) - fft/ftt/tft/ttf
NOR (OR,NOT) - fft/ftf/tff/ttf

РЕАЛИЗАЦИЯ СДНФ Функции
(X AND NOT Y AND NOT Z) OR (NOT X AND Y AND NOT Z) OR (NOT X AND NOT Y AND Z)
(X&!Y&!Z)|(!X&Y&!Z)|(!X&!Y&Z)


rs тригер

Нет напряжения хранит
На S - напряжение установка
На R - стирание

clk-data-тригер
Каскад используется для большей стабильности

Сумматор
Перенос бита при сложении 1+1

Принцип Фон-Неймана
адрестность
однородность - команд и данных
Программное управление

IP - указатель на исполняемую команду

Компоненты вычислителя
АЛУ - арифмет-лог устройство
ПАМЯТЬ 
УСТРОЙСТВО В.В
УПРАВЛЕНИЕ

Архитектура Фон-Неймана
Гарвардская архитектура
В последней раздельное хранение инструкции и данных.
Большинство построенно по Фон-Нейману

Тактовый генератор
кварц, clk контакт в составе процессора
Задает общее время в системе

Организация ввода
через порты и память
IN OUT - команды процессора
Резервируется адреса для устройств, обращаясь к ним мы обращаемся к
устройствам. Называются портами. Устройства слушают свой порт.
Память посредник через которую обращемся к девайсам.

Прерывания
Специальный контакт для прерываний на ЦП и переход к обработке
Синхронные и асинхронные прерывания.
Асинхронные - выделение памяти для соединения
Внутренние и внешние прерывания

Контроллер прерываний - 
ассинхронные маскированные прерывания 

Одно маскированное и немаскированное обрабатывать одновременно
КП - мультиплексор от устройств обрабатывает прерывания. ТК на процессоре не
хватает линий прерывания (их 3 )
Каскад контроллеров прерываний

Таблица прерываний - таблица векторов
Запись таблицы - вектор прерываний
Вместе с сигналом прерывания проиходит передача номера, после этого
ЦП обращается по адресу в таблице

NM1 - немаскируемое обязательное прерывание
INT R - запрос на прерывание
INT A - принятие

Номер прерывание выставляется на шине данных

#######################
АССЕМБЛЕР
набор мнемоник для работы с командами процессора

mov - перемещать данные между памятью и регистрами
но запрещенно перемещать между памятью и памятью
mov ax,[bx] - перемещение ссылки
sub - отнять
add - добавить
inc - инкремент
label: - адрес следующей ячейки памяти
jmp - переход к следующей ячейки памяти
call - вызов функции, должно заканчиваться ret
int - вызов обработчика прерывании

Флаги регистров устанавливаются  в случае переноса
F z - ноль 
  с - перенос

cmp - сравнить значения
jle - если c,z
jz - переход z
jne - если !z

______________
Архитектура x86
набор регистров и наборк комманд
 - вычислительные
 - работа с памятью
 - управление переходами

 Регистры общего назнацения
 eax, ebx, edx, ecx
 esi,edi - указатели и индексы

 esp, ebp - работа со стеком. 
 Стек служит для передачи параметров
 push, pop
 

 Реализация функции на ассемблере

 Разница intell at&t

 add %ebx,%eax 
 переменные в обратном порядке

 jc - переход в случае переполнения
 jmp переход к метке

 __________________

 Операционная система

 Общего назначения
 сетевые ФС

 Адресное пространство - диапозон имен

 Физическое пространство, адресное пространство шины, адресное пространство
 функции языка

 Программа располагает адресом кода, стэком, данные программы
 Регистры Цп при исполнении содержат данные процесса.

 Файл - поименованная область данных. Интерфейс взаимодействия.
 -имя
 -дату и время
 -права доступа
 -тип

 ioctrl - пареметры взаимодействия с файлом

 обязательные компоненты:
 планировщик процессов

 Монолитное ядро собранное в кучу
 Структурируемое и модульное ядвро
 Обеспечение виртуализации

 клиент-серверное взаимодействие в рамках одной машины

 Драйверы могут быть к протоколам

 Дескриптор памяти - права доступа к адресному пространство.

 Прерывания
 поступают от оборудования
 и работы с процессами

 исключение
 IO
 таймеры
 системные вызовы

 вызов системных вызов дела затратное

int 0x80 - системное прерывание вывода в консоль

printf -> fprintf -> write -> int 0x80

Драйвер обеспечивает доступ к устройству

символы - посимвольная запись
блочные - пишут пачкой
сокеты

По таймеру выгружаем контекс процесса и загружаем другой процесс


CPU burst/ IO burst

доступ к процессору
доступ к IO

Обращаясь к цп не обязательно мы хотим производить вычисления

Потоки

active - исполнение программы
wait - обращение к устройствам ввода-вывода
ready  - после записи 

Многозадачность
вытесняющая и невытесняющая

потоки вытесняются по таймеру
невытесняющая - спрашивают процесс на сколько он готов к переключению

синхронизация потоков
логика которая не может выполниться за один квант времени
Процессерное исполнение может быть не атомарным.

Критеческая секция - один процесс. 

Критическая область освобождается только если она находится в консистентном
состоянии

lock & unclock захват критического ресурса

вытеснение и многопоточно может вытеснить доступ к кретическому ресурсу
создать атомарность TSL для невозможности вытеснения 

Гонки - разный результат при разных доступах.
Голодание - процесс не может получить доступ к ЦПУ
Дедлоки - взаимное блокирование потоков через захват взаимозахваченных
ресурсов.

Групировать блокировщики в одном порядке

Самая быстрая память это регистры

Указатели - переменная с адресом
разрядность процессора = разрядности указателя = шине адреса

mov bx, [ax] - перейти по адресу регистра ax

плоская память - указатель указывает на адрес
сегментация памяти - сегмент+смещение
позволяет съэкономить на длинне адресации

пэеджинг - виртпамять - страничная память.
Память разбивается на страницы. Страницы содержать адреса на различные типы
памяти

Системное прерывание ищет в страницу. ОС ищет страницу с данными.

Память в защищенном режиме
сегмент+смещение+размер_сегмента+модификаторы доступа
в случае попытки повышения привелегий возникает системное прерывание

 Адресное пространство

 0x0 = 0xF начало и конец
 разделение на kernel & user space
 kernel - os stack

system heap - отдает система приложениям.
shared memmory - межпроцессорное взамиодействие

Стэк
структура данных реализующая lifo
push pop

sp - stack pointer - вершина стэка
ss - конечный размер

добавляем адрес возврата также в параметры

bp - указывает доступ к нашим параметрам
ret 4 - сбрасить два числа со стека


код - в текст программы
data - реременные
stack - в момент вы
Статическая переменная размещается в data
Автоматическая в стекэ
Динамическая * - в куче

Текст и дата появляются в момент загрузки программы
В стэк загружаются в момент выполнения

jmp переходит по адресу, перед этим разместив его в регистр ip
нет возможности передать значение переменных

сall - позволяет возвращаться
параметры функции помещаются в стэк
и помещаем адрес возврата


возврат из функции через стэк либо  регистры

Кто должен выделять место в стэке

aplication binary inteface 
- размер, выравнивание по границе
- формат передачи параметров, возврат значения
- форматы системные вызовы
- формат исполняемых файлов

ABI - интерфейс исполняемых приложений
компиляция - сборка и линковка

сборка - разнесение по секциям данных(текст, дата, стэк)

hello.o - получаем файл объектного кода

Определям параметризацию, кто будет определять возврат, возврат значений

 Линковщик - собирает исполняемый файл. Перенесется код программы. Код запуска
 и код завершения. Связывает исполнения с библиотекой. Указывается размер
 стэка.

IPC
файлы
пайп - буфер в который с одной строны пишутся данные, а с другой читаются.
сигналы - обработчики прерывания на уровни процесса
разделяемая память(shared memmory) - физическая память отображенная на два
логических адресса обоих процессов

mkfifo Mypipe - создать именнованный канал
тип файла p

tail -f - чтение файла. У канала один читатель и один писатель.

kill -l сигналы для отправлки сигнала процессу

драйвер TCP - разбить данные на tcp пакеты


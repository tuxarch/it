Принцип модульности в программирование заключается в следующем.

большая задача разбивается на ряд подзадач. Решение такой подзадачи образует
модуль, который может превратиться в стандартный модуль если он сможет решать
смежные задачи.

** xml **  - пакет для работы с xml

Модули могут быть обычными и расширенными, те написанными на другом  языке.

Путь к модулям можно найти с помощью переменной sys.path(хотя у меня не
получилось)

Так же модули могут быть помещены в архив, по анологии с jar файлами.

Так же поиск модулей идет и в текущем каталоге.

import - добавляет модуль

from-import - позволяет подключать только отдельные методы подуля.

** As ** \- позволяет изменять имя модуля.

** reload(module)  ** \- позволяет повторно загрузить модуль



Без подключения дополнительных модулей в среде заранее доступны более сотни
встроенных объектов.

** help() - ** позволяет вывести стандартную справку по интересующему элементу.

** abs - ** позволяет получить модуль 

** divmod(21,3) - 7,0 **  позволяет получить частное и остаток от деления.

** pow(2,3) **  - позволяет возводить в степень(3)

** round - ** позволяет округлять числа с заданным размером после точки.

** ord('s') - ** ascii код символа возвращает в конце.

** chr(113) **  - позволяет возвращать символ по числу кода.

** len() **  - позволяет получить посчитать длинну элемента.

** oct() hex() **  - преобразуют число в 8 или 16 систему счисления.

** cmp() **  - позволяет сравнивать два числа, результат 0,1,-1

**center(18,4) - ** позволяет выравнивать текст по центур строки

** enumerate() - ** позволяет строить нумерованый список.

** hash() id() **  - позволяют получать хеш значение , так же ид объекта 

** vars() - ** используется в качестве словаря для форматирования.

** eval() - ** вычисляет переданное значение.

** open() file() - ** являются синонимами в новых версиях.



                         Стандратные модули можно разбить на подгруппы

Сервисы периода выполнения

Поддержка цикла разработки

Взаимодействия с системой.

Обработка текстов

Многопоточные вычисления

Хранение данных, архивация.

Платформо-зависимые модули

Поддержка сети

Поддержка интернет

Графический интерфейс Tkinter



Модуль ** sys ** содержит в себе информацию о среде выполнения программы.

** exit() ** выход из программы.

argv - возвращает список элементов командной строки.

** platform **  возвращает название платформы интерпретатора.

** version **



     Копирование объектов может происходить не совсем верно при работе с
объектами, поэтому необходимо использовать функциию ** copy( ** )

** math cmath - ** модули 

randrange - функция позволяет генерировать случайное число находится в range
пакете



** Time.strtime   - ** позволяет вывести текущее врямя задав при этом форматирование.



locale - позволяет установить локаль для программы.

gettext - может позволить локализовать поддержку нескольких языков в
программе.

** profile ** модуль позволяет просматривать скорость обработки программы.

** unittest - ** позволяет проводить тест модулей стандартными средствами.

** pydoc - ** позволяет просматривать документацию, а также возможно переслать ее на вебсервер.



Работа с ОС

acess() - позволяет установить существование файла и права доступа к нему

getcwd() - показывает текущий каталог

listdir(dir) - выводит список файлов каталога, кроме, как я понимаю скрытых

mkdir - создает каталог

rename - позволяет переименовать каталог

utime - устанавливает дату модивификации.

tempfile() - создание временного файла





Сирилизация запись объекта как последовательности байтов.

Это необходимо для того чтобы передать объект или сериализовать его.

pickle.load и dump, Pickler - позволяют записать данные на диск.



Модуль shelve - позволяет огранизовать некую полку для хранения данных

anydbm adbm - работают с примитивными базами данных

** CVS ** позволяет работать с одноименным форматом, который часто применяется при передачи данных




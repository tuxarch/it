Введение в базы данных
Введение в базы данных
https://stepik.org/course/551/syllabus

Персистентный - длительный

Использовались MySQL, MongoDB - документ-базы, Redis - key-value

Архитектура СУБД:
ядро - процессы, сеть, 
диспетчер данных - транзакции кэш
диспетчер запросов - оптимизация запросов
доплнительные настройки - обслуживание
Достоинства:
Целостность и защиенность данных

Недостатки:
Низкая скорость доступа к данным

Диалекты языка: oracle, mysql, postgres, mssql, sqlite, 
Многие NoSQL базы поддерживают язык


кортеж - строка в таблице, набор значений атрибутов

--
1.3 Агрегация данных 
Выполняем действия со значениями - арифметика, логика

select count(1) from project; - количество строк узнать
select avg(budget) from project - узнать средний бюджет

datediff - разница между датами
max
min

group by  - групировать вывод по значению
order by - указываем сортировку
order by colum_name desc - обратная сортировка
limit - сколько записей всего выводить

---
2. Основы релиационных базы данных

Модель данных
- структура
- манипуляция - набор оператор 
- ограничения целостности 

Структурная часть.
тип данных - все элементы имеют тип.
целые числа - int, bigint, smallint
с дробью - numeric, decimal, float 
строковые - char, varchar, string
календарные - date, time, datetime, timestamp
другие - 
null - отсутствие значений

Атрибут - имя поля + тип данных
Кортеж - строка в таблице (имя атрибута, тип данных, значение)

Схема отношения - именнованое множество упорядоченных пар (те это таблица)
Схема базы данных - множество именнованных схем отношений

Базы данных это взаимосвязанные таблицы

Тело отношения - множество кортежей соответствущих схеме отношений
Значение отношения - пара множеств: схема отношения, тело отношения

describe project_table - описание таблицы


Отсутствие дубликатов, отсутствие упорядоченности


Реляционную алгебру испольняет DML SQL 

Ограничение целостности:
Строки в таблице должны быть различны

Внешний ключ
Запись которая указывает на значение в другой таблице
Все ссылки должны быть действительными
Это обеспечивается:
Блокировкой, Null, каскадоное удаление

Достоинства:
целостность данных, гибкость выборки, разграничения доступа
Недостатки:
Плохая производительность, много таблиц, 

Архитектура ANSI/SPARC

Разные пользователи имеют разные представляения данных
Пользователи должны быть абстрагированны от проблем с файловой системы

Внешний уровень - пользователи
Концептуальный уровень - логическая структура БД
Внутренний уровень - реализация СУБД

Практика:

CROSS JOIN - декартово соединение - для каждой записи из таблицы A вывести
каждую B (6 строк в А, 4 строки в В - будет 24 в выборке)

select * from product, category 
select * from product cross join category


Тета-соединение
Кортежи из декартова соединения приминительно к условию

INNER JOIN - внутреннее соединение
select * from product inner join category on product.category_id = category.category_id
Каждый товар имеет номер категории, даем расшифровку номера этой категории






NATURAL JOIN 

select * from product INNER JOIN category on product.category_id =
category.category_id


Запросы к нескольким таблицам:
CROSS JOIN  - все строки из указанных таблиц
INNER JOIN - общее между таблицами
LEFT OUTER, RIGHT OUTER - все внутренние строки + левые или правые
FULL OUTER - 
NATURAL JOIN - 

_Процедуры расширения SQL
описанны в PSM
	операторы DDL, DML
	определение функций и процедур
	управлящие конструкции
вычислительно полный язык

Cущественное различия между реализациями СУБД

Использование тригеров и хранимых процедур

Использование языков программирования postgres - python

Процедуры исполняются сервером БД
взаимодействуют с данными в бд

База которая еще будет исполнять код - это просто пи.....

Зачем это нужно? Добавить функциональность.

Хранимая процедура - код на базе

Сокрыть реализацию базы

Тригеры. 
Обрабатывают события при действиях - удаление, изменение
Применяются для проверки данных, поддержка консистентности


#####################################
3 Модуль. Проектирование базы данных

Строим таблицы, строим связи между ними

Сформировать концепцию - перенести на логику - реализация

Модель Сущность - Связь (ER)

Порядок проектирования:
Строим сущности - связи между ними - атрибуты сущностей - ключи отношений -
ограничения целостности

Определение связей:
Один ко многим
многие ко многим
один к одному

Кратность связи 
0 или 1 - или связан или не связан
1 - связь должна быть

Логическое проектирование.

Набор правил перехода:
Каждый простой тип отображается
Атрибуты ER отображается в атрибуты отношений

#################################
Нормализация 

Нормализация - набор отношений соответствующий требованиям
наилучшая групировка атрибутов
Новы отношения


1-4 Нормальные формы
В каждой ячейке одно значение
многозначность, 



ОРМ - Объектно-реляционные отношения
ОРМ - независит от конкретной СУБД
Возможность использования наследования

Django ORM 
from django.db import models
Запрос ORM преобразуется в sql

EXPLAIN 
Какие операции будут происходить над запросами
SQL - блокирует базу сначала 

Индексы

Кластерный индекс - упорядоченное дерево
Некластреные индексы 

B-индекс - бинарный поиск
Создаем контрольные точки по которым в дальнейшем ориентируемся

Хэш-функция - получаем значение от хэш-функции и кидаем ее в таблицу, а затем
ищем по этой таблице


NoSQL 
Потребность в распределении и масштабировании
Быстрота работы с данными

CAP - теорема 
либо распределенная система, либо согласованная

BASE-архитектура

key-value - быстрый доступ к данным redis, memcache. Кэширование, работа в
реальном времени

Документо-ориентированные бд - mongodb, couchdb
Для хранения информации о показе реклами

Столбцовые - casandra

redis - самая быстрая бд. Все лежит в памяти.
Редис скидывает свое состояние на диск
может обрабатывать до 100к запросов
Больше сотни команд

Репликация - мастер-сервер
Pub-Sub - подписка, что-то типа push уведомлений

MongoDB - нет общения между репликами, а в redis слайвы могут общаться

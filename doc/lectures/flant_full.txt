== docker сборка
1 млн rps - google facebook
200тыс - может держать nginx


Zero downtime 

Слои сборки:
Инфраструктура - тяжелое и редко меняющиеся
Обновление и установка пакетов

Использование кэша при сборки имеджей
Монтируем общие tmp, build_dir для сборки шаренные nfs 

Используем diff вместо полной синхронизации
Подключаем артeфакты сборки


=== Kubernetes для небольших проектов
до 500 нод

Elastic load balancer vs Elastic beanstalk

Сборка метрик, логов,
Service discovery


Используемые примитивы:
Deployment
CronJob/Job
StatefullSet
Ingress
Service

Три машины, на каждой ingress, ceph, pacemaker для failover ip, dns

=== CI/CD kube & gitlab

Stage - среда максимально соответствующая продакшен, работающая с свежими
данными и компонентами

Разделение прав:
Что можно править
Окружения какие использовать
Катить в продакшен / кворум или теамлеад

Возможность отката
gitlab dockerregistry

Cостав проекта:
gitlab-ci.yaml - отвечает за сборку
dockerfile
helm



git branch - среда разработки
git tag - релизные образы


Порядок обновления и запуска контейнеров
Migration Job - джаба для обновления или перехода к новой базе

Проблема с переключением версий
Graceful stutdown - обработка входящих соединений при переключении
rollback в gitlab

=== kubernetes monitoring

Цель мониторинга:
Прогнозирование
Уведомление об аварии
Аналитика

Объекты быстро меняются

redis+sentinel - кластер простой, но лучше redis cluster

Prometheus - один бинарь на go
alertmaneger - бинарь для обработки алертов

Два сервера для сбора метрик
Несколько алерт менеджеров
10-100 тысяч метрик
Сортировка по селекторам для мониторинга

Мониторим
Используем примитивы kube:
kube-dns
kube-ingress
kube-Prometheus

elasticsearch
mysql-bd
reddis
php
uwsig
etc....

Drill down - кто жрет ресурсы:
по namespace, deployment, pod, container







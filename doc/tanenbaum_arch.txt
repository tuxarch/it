Архитектура компьютера (2013) 5-е издание. 
Таненбаум

Идея иерархической структуры где каждый уровень выполняет свои функции

Atmegal68 - AVR микроконтролер
ОMAP4430 - RISC
CORE i7 - CISC

Электронные схемы могут воспринимать только машинные команды

Трансляция - перевод из Я1 в Я0
Интерпритация также переводит команду в Я0. Но делает это на лету.
Разница в том, что при интерпритации не создается полный код в Я0.

Человек пишуший на высоких языках не обязан знать нижележащие

Уровни:

5.Прикладной (трансляция)
4.Ассемблер (трансляция)
-------------Cистемный и прикладной программист, ниже чистый цифровой код.
3.Гибридный уровень. Уровень ОС (интерпритация)
2.Архитектура набора комманд (микропрограмма) (интерпритируются)
1.Микроархитектура (исполнение)
0.Цифровой уровень (транзисторы реализующие булевую алгебру)

0.Цифровой уровень состоит из вентелей (собираются из транзисторов) Вентили
объединяются в бит, бит в группы по 8,16,32. - регистры

1.Регистры и вентили формируют память и АЛУ (арифметическо-логическое
устройство). Регистры и АЛУ образуют тракт данных.

2.Архитектура набор команд исполняемых интерпретатором

3.ОС образует гибридный уровень, предоставляет доступ к микрокомандам и
позволяет организовывать доступ к памяти и многозадачность.
Отсюда и ниже работают системные разработчики.

4. Символьная форма понятная человеку для работы с цифровой архитектурой
нижниx уровней.

5. Уровень прикладных программистов

Архитектура - набор типов данных, характеристик, взятого уровня.

___________________

История ЭВМ.
Аппаратура и ПО
Любой программный интерфейс может быть реализован аппаратно.
Аппаратное уже неотделимо от программного и содержит в себе реализацию кода.

Аппаратное - это окаменевшее программное.

От ламповых компьютеров работающих под руководством программистов, через
разделение и делегирвоние к современному положению.

Историческая перспектива:

1834 - механическая машина Бэббиджа
1930-е - фон Нейман совместное хранение команд и данных. АЛУ-УпрПамять
43 - первый ЭВМ
45 - ламповый эвм
51 - появление основных идей архитектуры вычисления
55 - транзисторные пк
60-е появление ОС Fortran Monitor System. Терминальный доступ
65 - промышленное производство, интегральные схемы
70-е появление микрокода. Прерывания, индексы, перемещение данных
81 IBM PC x386 и сверхбольшие интегральные схемы, FPGA
83 графический интерфейс APPLE
89 - планшет, специализация пк
92-смартфон
2001-двухъядерная система

Поколения компьютеров:

0. Механические вычеслители
1. Первое поколение. Компьютеры на электронных лампах (194х-1955)
2. Второе поколение. Компьютеры на транзисторах (1955-1965)
3. Третье поколение. Компьютеры на интегральных схемах (1965-1980)
4. Четвертое поколение. Компьютеры на больших (и сверхбольших) интегральных схемах (1980-…)
5. Пятое поколение. Микроконтролеры встраеваемые в бытовую технику.



Развитие связанно с увеличением количества транзисторов. Закон Мура каждые 4 года увеличение в 2 раза.
Дальнейшее уменьшение технологии производства схем приводит к наводкам и перегреву.
Квантовые компьютеры и углеродные трубки вместо кварцевых подложек.
Удешeвление компьютеров


Типы компьютеров:
одноразовые эвм - открытки
микроконтроллеры и встроенные эвм
мобильные эвм
ПК
серверы
Кластеры
Майнфреймы

RFID - микросхема которая заводится от радиочастотных колебаний.
считывание от 20 см до 300 метров. Активные и пассивные

Развитие архитектуры x86
1971 - 4004 - первый процессор на микросхеме, 4-х разрядный
1972 - 8008 - 8-разрядный
1974 - 8080 - широкий серийный выпуск
1978 - 8086 - 16-битная архитектура
1979 - 8088 - процессор для IBM PC
1982 - 80286 - архитектура с защитой памяти
1985 - 80386 - 32-разрядный процессор
1989 - 80486 0 появление кэш-памяти
1993 - Pentium - два конвеера
1993 - Pentium pro - два уровня кэш-памяти
1999 - Pentium 3 - работа с трехмерной графикой SSE
2000 - Pentium 4 - гиперпоточнойсть
2006 - Core Duo - два ядра
2006 - Сore 0 64-бита, 4 ядра
2011 - Сore i7 - интеграция графического процессора

Обратная совместимость вплоть до 8086. Программы для данного типа процессора
должны исполняться на новых.


RISC & CISC
1982 создание RISC
RISC - небольшое количество простых команд. Команды выполняются в 10 раз
быстрее.
RISC ядро в intel x486 и CISC для сложных функции.

Принципы risc:
Устранение интерпритации микрокоманд, обходимся без вызова микрокода.
В памяти только команды загрузки и выгрузки
Большое количество регистров для данных


SIMD-процессоры (NUMA) - один поток команд, с нескольколькими схожими потоками
данных.


Иерархия памяти:

Pегистры
Кэш
ОП
Магнитный диск,
Диски
Сеть

Устройство HDD:

Дорожка - круговая последовательность данных
Секторы - участки фиксированной длины на дорожке
Длина сектора - 512 Кб ~
Преабула вначале для синхронизации чтения записи
Данные
Код исправления ошибок
Интервал между секторами


Емкость форматированного диска на 15% меньше
Позиционирование головки - 5-10 мс
Время ожидание сектора - 6 мс


RAID

RAID 0 - блоки записываются поочередно на диски. Увеличивается скорость.
RAID 1 - зеркалирование 
RAID 2 - оперирует байтами (словами). Каждый байт разбивается пополам, к
половине добавляется код обработки ошибок 3 бита. И эти семь бит записываются синхронно на 7 дисков по 1 биту на диск. Повышенная производительность. От 7 дисков есть смысл ставить.
RAID 3 - упрощение 2 рейда, с отдельным контрольным диском с битом четности.
От 3 дисков. Невозможность корекции ошибок на лету. Для больших хорошо файлов.
RAID 4 - pаботает c полосами, a не битами. Не требует синхронизации. Устроен как RAID 0, но с диском четности.
RAID 5 - похож на 4. Работает полосами, но биты четности пишутся на все диски.
Позволяет работать параллельно, больше производительность. тк нет узкого места с диском четности.
Экономичен для дискового пространства. От 3 дисков
RAID 6 - похож на 5. Но 5 дисков, два диска с контролем ошибок. Востановление данных при
утрате 2х дисков.
Комбинируемые уровни:
RAID 10: - Запись в RAID 0 двух RAID 2. 4 диска. Выход из строя при падении дисков в одном массиве.
RAID 51: - Зеркалирование двух RAID 5

Райды используемые в серверных решениях
0/1/5/6/10/50/60


Терминал - устройство ввода и вывода


##Шины. PCI/PCIe
Шины бывают адресными, информациоными, управляющими.
DMA - прямой доступ к памяти, без участия процессора. По оканчании задачи
прерывание на процессоре.
Две шины. Деление на южный и северный мосты.
Северный мост обьединяет память, цп, графику
Южный - переферийные устройтва, сеть, диски, звук.

PCIexpress - двухточечные соединения. А значит отход от шины, pci - есть
коммутатор. Данные отправляются в пакетах.
Можно подключать на горячую.

Последовательные и параллельные порты.
Последовательные пердают бит один за одним
Параллельные - несколько каналов передачи




####### Физический уровень

# Устройство памяти
Два вентеля образую защелку для хранения данных.
Триггер запускается перепадом сигнала, а защелка запускается уровнем сигнала
Устройство микросхемы памяти
19 адресных ножек, 8 для загрузки и хранения 
cs - выбор элемента цели
we - запись данных
oe - разрешение для выдачи сигналов
ras, cas - сигналы выбора банка

ОЗУ. RAM. Статическая и динамическая. Энергозависимая.
Динамическую нужно постоянно обновлять иначе исчезнет заряд.
SRAM - на тригерах, используется на кэшах цп.
DRAM - на транзисторе и конденсаторе.

ПЗУ. ROM.
Не стираемая память. 
EEPROM - позволяет изменять содержимое. Есть контакты для перадачи сигналов.
Флеш-память - позволяет писать блоками.

## ЦП
Канал к DDR
Канал к шине PCI
Канал DMI - обьдиняет с южным мостом
Канал терморегуляции и мониторинга





#### Микроархитектура
Тракт данных - алу с регистрами.
Управлящая память. Список.
Каждая микрокоманда содержит адрес следующей команды.
Логика за счет сдвига.Переупорядочивание команд.
Опрос кэша перед походом на диск.Кэш-попадание 
Прогнозирование.
Конвеерность
Спекулятивное исполнение - выполнение команды раньше необходимого
Подмена регистров для организации конвеера

Микроархитектура Core i7
Подсистема памяти (Подсистема памяти с доступо к кэш3 (for all cpu), кэш2)
Блок предварительной обработки (декодирование в risc, блок прогнозирования,Кэш команд)
Блок контроля исполнения с изменением последовательности (планировщик, подмена
регистров,)
Блок исполнения (Кэш 1 уровня, АЛУ,)

Микроархитектура Cortex A9 ARM
Похожие блоки
Блок памяти
Блок Блок прогнозирования
Блок вызова команд
Блок исполнения

Отличие в декодировании CISC команд в RISC

Процессор ATmega168 прост до крайности — к одной основной шине подключено несколько регистров и одно АЛУ



#### Уровень архитектуры набора команд

Связующее звено между аппаратным и программным обеспечением.
Все программы должны транслироваться в общий язык.

Обратная совместимость очень важна для устройств.

Данная программа получается после работы компилятора

Поддержка привилигированного и пользовательского режима.

Некоторые регистры недоступны на этом уровне. (TOS, MAR)
Специальные регистры - указатели на стэк
Регистры общего назначения - переменные

Специальные регистры доступные в привелигерованном режиме

Набор машинных команд. 
LOAD, STORE - перемещение данных из регистров в ОЗУ и обратно

Флаг PSW регистра определяет уровень привелегий
0 - обеспечивает полный доступ к машине. Используется ОС.
3 - запуск пользовательских программ
В режиме пользователя блокируется доступ к регистрам управления

Регистры в ARM
R0-R3 - параметры процедуры
R4-R11 - переменные процедуры
R13 - указатель стэка

Контроллер AVR - не защиты, нет многозадачности.
R0-R32 - количество регистров

Типы данных
Отдельные регистры для чисел с плавающей точкой
Особые команды для работы со строками

Формат команд
Команда - адрес - адрес 
Команда - команда - адрес -адрес?

Адресация
Непосредстваенная - положить значение
Прямая - дать полный адрес ячейки со значением. Переменная изменилась, а ее адрес нет. Подходит для констант.
Регистровая - указать на регистр с переменной
Косвенная регистровая - адрес содержится в регистре и может меняться.
Индексная - указание смещения
Стековая адресация 


Типы и наборы команд:
Перемещение
Бинарные операции - сдвиги
Унарные 
Сравнения и переходы
Команда вызова процедур - подпраграмма, группа команд решающих задачу

Перехват исключений
Исключения могут обрабатываться аппаратно.

Прерывания
Сохранение контекста и его последующее разворачивание. После выполнения.

Компилятор как планировщик.

Микропрограмма (набор инструкции процессора) - служат связующим звеном.
уровня архитектуры команд и микроархитектуры.


### Операционная система.
Каждый уровень добавляет свои фишки к предыдущему.
ОС - программа добавляющая функции к уровню архитектуры команд.

Уровень ОС доступен для прикладных программистов. Он содержит все команды
более низкого уровня УАК, а также СИСТЕМНЫЕ ВЫЗОВЫ.
Уровень ОС всегда интерпретируется - команда выполняется шаг за шагом. 

Виртуальная память 
Файловый ввод-вывод
Паралелизм

Виртуальная память. 
Страничная организация памяти. (PAGE)
Память ограничена, используем ее как хранилище
одной страницы.  Выгружаем, загружаем следующий диампозон. Листаем страницы.

Реализация. Виртуальное пространство разбивается на ряд страниц равного
размера ~ 4 кб.  Имеющих номер страницы и диапазон адреса.
Специальное устройство MMU на плате отвечающее за виртуальную память.
Проверяет не загруженная ли страница в память - смотрит флаг. Ищет данную
страницу. По номеру и смещению. И загружает ее в память.

В памяти должны лежать только нужные страницы. Алгоритм планирования.

Сегменты (SEGMENTS)
Множество независимых адресных пространств.
Просмотреть адресное пространство процесса cat /proc/PID/maps

Сегментация при параллельной обработки.

Сегментация и страничная память для разных целей. Сегментация для изоляции
пространств процессов.
Сегментация может иметь разные размеры сегментов.

В Core i7 виртуальная память состоит из двух таблиц:
LDT - локальная таблица дескрипторов
GDT - глобальная
Локальная для программ, глобальная системная

Индекс, тип таблицы, права доступа

Сходство ВП и кэширования схожи. Хранят нужные данные недалеко.
Кэш-промахи обрабатываются аппаратно, остутствие страниц ОС.

Виртуализация оборудования
Гипервизор - программа обеспечивающая запуск ВМ. Имеет сходство с ядром.
Аппартная поддержка вычеслений VMX, 
EPT - поддержка виртуальных страниц


Файлы - абстрактное представление данных
Файл как последовательность байтов 
Работа с файлами проиходит через системные вызовы, чтения, записи
С открытым файлом связан указатель на следующий байт чтения

Организация ФС
Сектора на HDD могут нумероваться непоследовательно
Последовательно на CD - нужно знать начало расположения
Непоследовательно - таблица файловых индексов.

Таблица файловых индексов - хранит физические адреса на блоки.
Индекс - список адресов блока (UNIX)

Отслеживать пустое пространство для записи - free list список
Или битовая карта - матрица битов дорожка/сектор

Групировка файлов в блоки - каталоги.
Каталоги строят древовидную структуру

Процессы
Cистемный вызов требуется для создания процесса
Подчиненность процессов - родительский-дочерний

Состояние гонок - переменная флага не соответствует состоянию обьекта, тк
тот изменился во время чтения флага.


Cинхронизация процессов
бит запуска процесса - для двух процесов подходит
Семафор - переменная и два системных вызова к ней up, down которые
прибавляют к семафору или убавляют 1. Доступ к семафору удерживается процесом.


Unix 
Разработка в 1974 для PDP-7 - популярной серии компьютеров.
Научные работы и премия Тьюринга.
Продажа лицензии AT&T научным институтам и хорошая документация с ОС.
Продажа Беркли где был прикручен стек TCP/IP и перенос на другие архитектуры.
Cтандартизация UNIX систем POSIX стандартом.
1987 - MINIX для образовательных целей.

Поток ввода-вывода между пользователем и устройством. И встраиваемая
модульность драйверов между ними.

IPC - (inter proc commun) - работа между процессами
scheduler

Виртуальная память в UNIX
Процесс имеет код, данные и стэк.
Каждый файл определяется индексным дескриптором (i-node) 
I-node:
Номер дескриптора,владелец файла, права доступа, и адреса данный.
Индексные дескрипторы находятся в начале диска или тома.
Inode директории
tree --inodesG


В Windows MFT - таблица главная с файлами аналог списка с inode. Но она может
быть перенесена т.к является файлом и переносится в пределах тома.
Содержимое маленьких файлов могут находится прямо в таблице

Управление Процессами:
Fork() - создание субпроцесса являющийся точной копией (родительский, дочерний)
Имеющие одинковые inode и общее файловое пространство.
Шелл каждый раз при вводе команды выполняет форк а затем exec
Wait() - родительский ждет завершение дочернего exit()

Взаимодействие процессов Unix через канал - буфер, один пишет в него другой читает
Linux - очереди сообщений:
msgget() - создать открыть очередь
msgsnd - отправить сообщение
msgrecv - получить

Очередь имеет формат и приоритет, канал - просто поток данных

Работа с общей файловым пространством через сисвызовы
shmat, shmop

Потоки. Каждый поток имеет свой счетчки, собственные регистры и стек.
Мьютекс - блокировка и разблокировка обьекта. Имеют значение 0 и 1, те это
бинарные симофоры.

Процессы в windows все процессы равны. Нет родит и дочерних.
Но есть иерархия доступа к описания одних к другим.

Удаленный вызов процедур
Процесс А командует B выполнить вызов в своем пространстве от имени A.


### Уровень Ассемблера

Язык ассемблера - символическое представление машинного кода
Данный уровень отличается от прерыдущих тем, что он реализуется трансляцией, а
не интерпретацией.
Во время работы ассемблера должны быть загруженны обьектный код, ос, микрокод.

Одна команда на ассемблере - соответствует одному машинному действию.

Дерективы - команды для самого ассемблера (выделить к примеру память)
Макросы - создание повторений

На языке ассемблера можно выполнять системные вызовы (int 0x80)

Проходы ассемблирования
1 - строится таблица символьный имен со значениями
2 - генерирование обьектного кода

Компоновка:
Транслятор переводит все процедуры в обьектный код, а линковщик их связывает.
Тк. процесс связи всех процедур в один модуль при трансляции сложен.
Линковка .o обьектного файла в исполняемую программу

Компановщик помещает все модули в память формируя образ исполняемого файла

Статическая и динамическая компановка
dll - библиотека. Совместное использование библиотеки различными процессами.



### Паралельные архитектуры
Сильносвязанные
Слабосвязанные
Чем сильнее ЦП взаимодействуют друг с другом в процессе вычисления тем сильнее
связь.
Уровень связанности /архитектура - ос - программа/

Градация:
Внутрипроцессорный паралелизм (суперскалярные ЦП - множество AЛУ, VLIW -
одна команда - пять операций, многопоточность - до 25% прирост)
Подчиненный процессор - сопроцессор (графика, сеть, диски там свои процессоры,
криптопроцессоры)
Мультипроцессор - имеют общую память
Мультикомпьютер - собственная память у каждого
Слабосвязанные системы через интернет


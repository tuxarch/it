Highload 2015
https://www.youtube.com/playlist?list=PLH-XmS0lSi_xEOn_ZSTqGRUtxIhXdpcWh

#######################################
1. Горизонтальное масштабирование
Вертикальное - расширение ОП, дисков и тп.
Горизонтальное - ставят сервера и организовывают взаимодействие

ab, siege - проверка web-сервера
300ms - это норма для сервиса

Обновить php, потюнить OpCache - скрипты всегда в памяти
Добавить индексы в бд Mysql
Включить кэш (memcache, redis)

Highload - проект перестает справляться с нагрузкой. Нужно масштабирование
горизонтальное.

Выигрываем время кэшами и оптимизациями.
Систему нужно постоянно мониторить.
Monit, munin - системы монитринга
Rollbar, sentry - собираем ошибки в одну пачку

Google Analytics, mixpanel - внешние сервисы подключаем для мониторинга.


Обойтись без прокси - используем dns round robin

ip-hash - используется для поддержания сессии. Есть поддержка в nginx.

Работа с файлами
Nfs - плохо
GlusterFS - работает быстрее NFS
Раздавать файлы nginx

Базы данных:
160млн строк и база жива (со смехом)
Репликация master-slave
	   master-master
	   руками
Шардирование
Партицирование

Master-slave: пишем на master, читаем со slave ил master
Читаем больше чем пишем.

Реплицирование происходит не сразу и лагает. Смотрим SHOW SLAVE STATUS.
Медленная сеть, не справляется реплика, слишком много слейвов.

master-master
Репликация занимает больше, поломка

Шардирование:
По юзерам, сложно собрать запрос со всех шардов

Поэтому начинают применять распределенные базы:
cassandra

Фоновая работа -
AMQP - rabbitmg 

Чем меньше связанности в системе тем лучше
Системы бьются на части и взаимодействуют между собой через интерфейсы

Ресурсы:
insight-it.ru, google sclability

linode.com, digitalocean - тестовые среды

#################################

2. NoSQL - базы
key/value базы
Redis, Memcached, Riak  

document_store - структура типа json
ElasticSearch 
MongoDB

column_store - файлы хранащие колонка
Cassandra, 
vertica - имеет sql интерфейс

По типам данных:
графы,


CAP теорема:
AP - распределенная система - даст ответ
CP - если и даст ответ, то ответ будет надежным

Когда использовать такие БД?
Высокая масштабируемость
Кэширование

Использовать буфер перед базой для обработки запросов

Для хранения документов
Для полнотекстового поиска

Проблемы:
Много вложенных данных

Поддержка json в postgres

Бэкап в noSQL - не нужен, тк работают в кластере.
Или копируем файлы, или програмные тулзы

Redis лучше memcahed

##############################
3. Кэширование Memcached.

freshness - свежесть данных
validation - проверка на свежесть

Что кэшировать: html, js, обьекты
Время жизни кэша указывается в HTTP заголовке

Смотри статистику кэша:
Работа кэша часть нашей системы.

Мониторим кэш

#############################
4. MySQL - репликация

Репликация не дает масштабирования на чтение

Виды репликаций:
 cинхронная - прошли на удаленных тачках
 асинхронная - доступны только локально
Уровни:
 Логические записи
 Физические - DRBD, ZFS - что-то не популярно

####################
5.Производительность запросов в postgres
Настроить память, настроить диски, автоваккум, и тп. После переходим к
оптимизаци запросов.
Плохое железо
Ненастроенная база - отключен или ненастроен автоваккум,
Оптимизация запросов

Какие вопросы самые загруженные? И начинаем оптимизировать их.

pg_stat_statements - модуль для статистки.
pg_utils - для работы со статистикой, смотрим статистику.

Плохой запрос 123 ms? Все относительно.
Что за запросы? Приносят ли они нам денег или нет?

EXPLAIN ANALYZE, ROLLBACK - анализ? или оптимизация?

join максимум на 10 таблиц. Сотня это уже пздц.

Подвиндой плохо работает
Если вылетает из индекса и переходит к таблицам. Неправильно настроен
автовакум.

##################################
6. Принципы и приемы обработки очередей

Транзакция должна поддерживать роллбак

Минусы:
Больше операций на задачу

Web-apps
Пользователь на сайте что-то нажал, хендлеры формируют сообщение в очередь, очереди
разгребаются.

###################################
7. Основы индексирования MySQL
Архитектура MySQL
Клиенты - Управление подключениями - парсеры, исполнители,кэши - интерфейс
хранилищ - MyISAM,InnoDB.

Индексы могут не работать при хитрых условиях, сдвоенный WHERE

############################
8. Тарантул
NoSQL в памяти на базе LUA aplication server

Докементо-ориентированная - те json
Индексы
Транзакции

###############################
9. Шардирование базы данных

Шардинг - вертикальное, горизонтальное
Горизонтальное по разным инстансам



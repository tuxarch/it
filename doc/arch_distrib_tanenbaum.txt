Распределенные системы. Принципы и парадигмы.
Танненбаум. 2003 год. 877 страниц.

Fundamentals paradigm

Расматривается связь, процессы, синхронизация, целостность, защита,
безопасность таких систем.
---------------------------


Распределенная система - это система разнесенная в пространстве и времени.

Распределенная система - это набор независимых компьютеров, представляющийся
пользователям единой системой.

Система которая работает на нескольких машинах.

__

Различия по силе связанности

Зачем нужно прибегать к распределенным системам: экономия, доступ к общим
ресурсам, удобство

Прозрачность системы - это степень инкапсуляции элементов и характеристик
системы. Чем более она независима тем более прозрачна.
Прозрачность требует много ресурсов

Открытость системы - переносимость, гибкость, расширяемость, 

Масштабируемость - 	по отношению к ресурсам
			пользователям
			географическому положению

Иногда узких мест нельзя избежать - пример особо секретные данные

асинхронные запросы
распределение - или микросервисы

Кэширование=репликация, но предпринимаемое потребителем ресурса

Мультикомпьютеры - каждый работает со своей областью памяти
Мультипроцессорные компьютеры - работают с общей областью памяти

Кэш на процессоре в случае мультипроцессорных систем. Понятие окна попаданиэ
кэша. Кэш до 1 МБ коэфициэнт попадания 90%

Коммутируемая решетка - каждый процессор связан с каждой областью памяти
Омега-сеть - четыре узла
Иерархическая сеть

Операционные системы - сильносвязанными и слабо
сильно - распределенными, заточенные для работы с оборудованием
слабо - сетевые, работа со службами

Распределенная - управление мультипроцессором
		управление гомогенным оборудованием

Работа нескольких приложении поднимает вопрос доступа к ресурсам. Поэтому
всплывает вопрос использование нескольких уровней доступа
Поэтому процессоры реализуют два режима работы:
-kernel mode
-user mode

В km - выполняются все инструкции и обеспечивается полный доступ
В um - работает только с адресами и ресурсами отведенными ОС

Для доступа нужно запросить доступ через системный вызов, системный вызов
работает аппаратными ограничениями
ОС работает в режиме ядра, выделяет память для приложении. 
Монолитная ос - весь код выполняется в режиме ядра и в одном адресном
пространстве
Модульное ядро, микроядро - только выделяет память

Защита данных при совместном доступе:
Семафор - значение предоставляющее доступ к ресурсам
Монитор - он же объект, атомарность доступа к ресурсу, на чтение изменение и
тп. Специальное поле для доступа

Мьютекс - простейший симофор 0 ли 1

В слабосвязанных ОС - процессы кидают сообщения, а не запрашивают доступ
непосредственно у процессора и ОС

На пересылке сообщений построенна целая система

Программирование в мультикомпьютерных системах сложнее чем в
мультипроцессорных

Поэтому стал вопрос о виртуализации.
Работа с виртуальной памятью - считывается страница в ней вирт, адрес -
происходит прерывание которое получает доступ к сегменту


Связь 

Процессы могут работать через общее адресное пространство либо через
высокоуровневую систему сообщений

RPC - удаленный вызов процедур 
Процесс на машине А вызывает выполнение процесса на машине В

Проблема с передачей указателей или ссылок на удаленную машину

-------------
Процессы.
Процесс это исполняемая программа

Многопоточность дело библиотеки либо ядра ОС
Чтобы обеспечить многопоточность на уровне ядра нужно совершить системный
вызов, а значит необходимо использовать.
Используется таблица потоков в которой используется мьютекс

Браузер отображает данные по мере поступления

Поток деспетчер

inetd - суперсервер для сетевых служб

Сервер объектов - сервер где крутятся только объекты с данными и ранном.

Переносимость кода - архитектура приложения могла легко переносится при
желании с клиента на сервер или наоборот

Адаптер объектов - компонент который организует только одну логику доступа
и взаимодействия с объектами

Именование
Сущность - это все что есть.
Сущности имеет уникальный идентификатор

Пространоство имен
Иерархия имен, точка монтирования
Распределенная служба наподобие DNS

Кэширование данных и репликация пространства имен

X.500 - служба распределенного каталога в которой хранятся имена и ресурсы

Динамические сущности
	- групповая рассылка - с увеличением сети уменьшается эффективность
	- указатели - или ссылки при перемещении
	- базовая точка

Виды имен: адрес, ид, имя для восприятия

++++++++++++++++++++++++++
Синхронизация

make проверяет время исходника и время собранного объекта. Если исходник имеет
дату большую, тогда запустится перекомпиляция.

Вопрос синхронизации начинается с времени

Таймер начинается с кварцевого генератора и CMOS

Для крупных систем необходима точность во времени

Атомные часы. 1582 год - 10 дней календаря пропускаются

Потерянная секунда TAI
C момента введение UTC время было скорректированно на 30 сек

Глобальное и локальное состояние 
Отправка сообщения фиксируется
а получение также записывается

Координатор синхронизации - назначенный и выбираемый


Транзакция - принцип acid
atomomic
consistent - непротиворечивы
isolated - изолированны
durable - устойчивы

Плоские транзакции - один компонент
Вложенные транзакции 

Транзакции можно разбить

Блокировка и двухфазная блокировка

++++++++++++++++++
Репликация

Надежность и произвотельность, масштабируемость

Репликация требует синхронизации, а следовательно и дополнительных мощностей

Операции - которые могут исполнятся независимо друг от друга называются
паралельными

Слабая и сильная модель непротиворичивости данных

Постоянные реплики
Серверные 
Клиентские - он же кэш

+++++++
Отказоустойчивость

Избыточность
Ошибка - неработоспособность части системы
Пути исправление - бэкап и к.точки
прямое исправление - самостоятельное исправление
TCP - пересылка пакеты или востоновление с помощью суммы или подгрузки
меттаинформации
Совмещение этих схем

++++++++
Защита
Защита должна быть конкретной, а не всеобщей

Защита канала передачи
Защита пользователя и авторазации

+++++++++
Распределенные ФС
NFS & CODA AFS

NSF - это интерфейс предостовляющий доступ к файлу

Доступ к файлу на сервере или выкачивание файла, а затем загрузка его в случае
модификации

ПОльзователь работает через интерфейс VFS
в него встроен клиент

Блокировка байтов при доступе к ресурсам, время аренды блокировки

plan9
xfs - пировая fs
Подключение через менеджера файлов, простые клиенты

sfs - защищенная fs
nfs - c аутентификацией

Основанны на RPC

Lotus Notes - аналог WWW
Приложения для клиента и сервера. Которые работают с БД

Основыные парадигмы для разработки приложения:
Назначение
Связь
процессы
именование
синхронизация
репликация и непротиворечивость
отказоустойчивость
защита

Зарезервированные переменные

$DIRSTACK - содержимое вершины стека каталогов
$EDITOR - текстовый редактор по умолчанию
$EUID - Эффективный UID.  su для эта переменная содержит UID этого пользователя, в то время как...
$UID - ...содержит реальный идентификатор, который устанавливается только при логине.
$FUNCNAME - имя текущей функции в скрипте.
$GROUPS - массив групп к которым принадлежит текущий пользователь
$HOME - домашний каталог пользователя
$HOSTNAME - ваш hostname
$HOSTTYPE - архитектура машины.
$LC_CTYPE - внутренняя переменная, котороя определяет кодировку символов
$OLDPWD - прежний рабочий каталог
$OSTYPE - тип ОС
$PATH - путь поиска программ
$PPID - идентификатор родительского процесса
$SECONDS - время работы скрипта(в сек.)
$# - общее количество параметров переданных скрипту
$* - все аргументы переданыне скрипту(выводятся в строку)
$@ - тоже самое, что и предыдущий, но параметры выводятся в столбик
$! - PID последнего запущенного в фоне процесса
$$ - PID самого скрипта

---------
Циклы

Повторить пять раз
for n in {1..5}; do <КОМАНДА>; done

Бесконечный цикл
while true; do terraform destroy -auto-approve; done

---------

Встроенные команды

break выход из цикла for, while или until
continue выполнение следующей итерации цикла for, while или until
echo вывод аргументов, разделенных пробелами, на стандартное устройство вывода
exit выход из оболочки
export отмечает аргументы как переменные для передачи в дочерние процессы в среде
hash запоминает полные имена путей команд, указанных в качестве аргументов, чтобы не искать их при следующем обращении
kill посылает сигнал завершения процессу
pwd выводит текущий рабочий каталог
read читает строку из ввода оболочки и использует ее для присвоения значений указанным переменным.
return заставляет функцию оболочки выйти с указанным значением
shift перемещает позиционные параметры налево
test вычисляет условное выражение
times выводит имя пользователя и системное время, использованное оболочкой и ее потомками
trap указывает команды, которые должны выполняться при получении оболочкой сигнала
unset вызывает уничтожение переменных оболочки
wait ждет выхода из дочернего процесса и сообщает выходное состояние.

-----------

Логические операторы

-z # строка пуста
-n # строка не пуста
=, (==) # строки равны
!= # строки неравны
-eq # равно
-ne # неравно
-lt,(< ) # меньше
-le,(<=) # меньше или равно
-gt,(>) #больше
-ge,(>=) #больше или равно
! #отрицание логического выражения
-a,(&&) #логическое «И»
-o,(||) # логическое «ИЛИ»


-------------------
Принятые сокращения в скриптах

-a Вывести все объекты.
-c Произвести подсчёт.
-d Указать директорию.
-e Развернуть объект.
-f Указать файл, из которого нужно прочитать данные.
-h Вывести справку по команде.
-i Игнорировать регистр символов.
-l Выполнить полноформатный вывод данных.
-n Использовать неинтерактивный (пакетный)
-o Позволяет указать файл, в который нужнo перенаправить вывод.
-q Выполнить скрипт в quiet-режиме.
-r Обрабатывать папки и файлы рекурсивно.
-s Выполнить скрипт в silent-режиме.
-v Выполнить многословный вывод
-x Исключить объект.
-y Ответить «yes»  на все вопросы.

_____________________________

read 
-s - вводд пароля
-p - возможность ввода нескольких ключей

______________________________

INPUT/OUTPUT

файловые дискрипторы от 0 до 9
0 stdin
1 stdout  - 2>
2 stderr
 &> - весь ввод перенаправить
 По умолчанию ошибки также падают в консоль

свои дискрипторы 3-8, всего может быть 9

cat /dev/null >  myfile - очистка файла

_______________________________

Сигналы

1 SIGHUP закрытие терминала
2 SIGINT Сигнал остановки процесса пользователем с терминала (CTRL + C)
3 SIGQUIT Сигнал остановки процесса пользователем с терминала (CTRL + \) с дампом памяти
9 SIGKILL Безусловное завершение процесса
15 SIGTERM Сигнал запроса завершения процесса
17 SIGSTOP Принудительная приостановка выполнения процесса, но не завершение его работы
18 SIGTSTP Приостановка процесса с терминала (CTRL + Z), но не завершение работы
19 SIGCONT Продолжение выполнения ранее остановленного процессаё

trap - перехват сигналов скриптом

nohup - отвязать исполнение скрипта от терминала

at - simple plans
________________________

Function

сначало обьявление, а потом использование
переопределение
return less 255


локальные переменные
local var=$(( $value +5 ))

подключить библиотеки можно в bashrc

______________________________

sed - потоковый текстовый редактор

mesg - пересылка сообщений
who 

для отправки сообщения смотрим who -T + можно отправить
write user tty1 - отправить сообщение


